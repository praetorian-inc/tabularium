package model

import (
	"fmt"
	"github.com/praetorian-inc/tabularium/pkg/model/label"

	"github.com/praetorian-inc/tabularium/pkg/registry"
)

// Vulnerability represents the metadata about a vulnerability, in the abstract. This is used to represent
// vulnerability state across all of chariot. This should be used as the basis for the global vulnerability database.
// Vulnerabilities are distinct from Threats. Threats represent metadata about vulnerability from a specific threat feed.
// Vulnerabilities are the single source of truth for vulnerability metadata. Currently, vulnerabilities are all constructed
// from NVD data, but in the future, we will add additional sources, with the appropriate priority. For example,
// we might prioritize our own CVSS scores and descriptions from VKB templates, and then fall back to NVD data.
type Vulnerability struct {
	registry.BaseModel
	Username string `neo4j:"username" json:"username" desc:"Chariot username associated with the vulnerability record (usually global)." example:"global"`
	Key      string `neo4j:"key" json:"key" desc:"Unique key identifying the vulnerability." example:"#vulnerability#CVE-2023-12345"`
	// Attributes
	Id        string   `neo4j:"id" json:"id" desc:"Identifier for the vulnerability (e.g., CVE ID)." example:"CVE-2023-12345"`
	CVSS      *float32 `neo4j:"cvss,omitempty" json:"cvss,omitempty" desc:"Highest CVSS base score associated with the vulnerability." example:"9.8"`
	EPSS      *float32 `neo4j:"epss,omitempty" json:"epss,omitempty" desc:"EPSS score (probability of exploitation)." example:"0.95"`
	Kev       bool     `neo4j:"kev" json:"kev" desc:"Indicates if the vulnerability is listed in the CISA KEV catalog." example:"true"`
	Exploit   bool     `neo4j:"exploit" json:"exploit" desc:"Indicates if there is known public exploit code available." example:"true"`
	Title     *string  `neo4j:"title" json:"title,omitempty" desc:"Title associated with the vulnerability." example:"Title"`
	WriteupId *int     `neo4j:"writeupId" json:"writeupId,omitempty" desc:"PlexTrac writeup ID associated with the vulnerability." example:"12345"`
}

func init() {
	registry.Registry.MustRegisterModel(&Vulnerability{})
	registry.Registry.MustRegisterModel(&VulnerabilityDefinition{})
}

var VulnerabilityLabel = label.New("Vulnerability")

func (v *Vulnerability) GetLabels() []string {
	return []string{VulnerabilityLabel}
}

func (v *Vulnerability) GetKey() string {
	return v.Key
}

func (v *Vulnerability) Valid() bool {
	return v.Key != ""
}

func (v *Vulnerability) Definition(definition VulnerabilityDefinition) File {
	file := NewFile(fmt.Sprintf("definitions/%s", v.Id))

	body := ""
	if definition.Description != "" {
		body += fmt.Sprintf("<p><strong>Vulnerability Description</strong></p>%s\n", definition.Description)
	}
	if definition.Impact != "" {
		body += fmt.Sprintf("<p><strong>Impact</strong></p>%s\n", definition.Impact)
	}
	if definition.Recommendation != "" {
		body += fmt.Sprintf("<p><strong>Recommendation</strong></p>%s\n", definition.Recommendation)
	}
	if definition.References != "" {
		body += fmt.Sprintf("<p><strong>References</strong></p>%s\n", definition.References)
	}

	file.Bytes = []byte(body)
	return file
}

func (v *Vulnerability) GetHooks() []registry.Hook {
	return []registry.Hook{
		{
			Call: func() error {
				v.Key = fmt.Sprintf("#vulnerability#%s", v.Id)
				return nil
			},
		},
	}
}

func NewVulnerability(id string) Vulnerability {
	v := Vulnerability{
		Id: id,
	}
	v.Defaulted()
	registry.CallHooks(&v)
	return v
}

// GetDescription returns a description for the Vulnerability model.
func (v *Vulnerability) GetDescription() string {
	return "Represents a specific vulnerability identified in the system (e.g., a CVE)."
}

type VulnerabilityDefinition struct {
	registry.BaseModel
	Description    string `json:"description" desc:"Description of the vulnerability." example:"A buffer overflow vulnerability in XYZ software."`
	Impact         string `json:"impact" desc:"Impact of the vulnerability." example:"Remote code execution leading to system compromise."`
	Recommendation string `json:"recommendation" desc:"Recommended actions to mitigate the vulnerability." example:"Apply the latest security patch."`
	References     string `json:"references" desc:"References of the vulnerability." example:"https://nvd.nist.gov/vuln/detail/CVE-2023-12345"`
}

func (vd *VulnerabilityDefinition) GetDescription() string {
	return "Represents the detailed definition of a vulnerability, including its description, impact, and recommendations."
}
