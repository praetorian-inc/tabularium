name: Auto Tag

on:
  push:
    branches:
      - '**'  # Run on all branches

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Get latest tag and increment version
        id: version
        run: |
          # Get current branch name
          CURRENT_BRANCH="${{ github.ref_name }}"
          echo "Current branch: $CURRENT_BRANCH"
          
          # Sanitize branch name for tag usage (replace invalid characters)
          SANITIZED_BRANCH=$(echo "$CURRENT_BRANCH" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "Sanitized branch name: $SANITIZED_BRANCH"
          
          # Determine tag format based on branch
          if [ "$CURRENT_BRANCH" = "main" ]; then
            echo "On main branch - using v1.0.X format"
            # Get latest v1.0.X tag (without suffix)
            LATEST_TAG=$(git tag -l "v1.0.*" --merged "origin/main" --sort=-version:refname | grep -E '^v1\.0\.[0-9]+$' | head -n1)
            
            if [ -z "$LATEST_TAG" ]; then
              echo "No v1.0.X tag found on main, starting with v1.0.1"
              NEW_VERSION="v1.0.1"
            else
              echo "Latest tag found: $LATEST_TAG"
              # Extract the patch version number and increment it
              PATCH_VERSION=$(echo "$LATEST_TAG" | sed 's/v1\.0\.\([0-9]*\)/\1/')
              NEW_PATCH=$((PATCH_VERSION + 1))
              NEW_VERSION="v1.0.$NEW_PATCH"
            fi
          else
            echo "On non-main branch - using v1.0.X-pre-$SANITIZED_BRANCH format"
            # Get latest v1.0.X tag from main branch as base
            LATEST_MAIN_TAG=$(git tag -l "v1.0.*" --merged "origin/main" --sort=-version:refname | grep -E '^v1\.0\.[0-9]+$' | head -n1)
            
            # Get latest pre-release tag for this branch
            LATEST_PRE_TAG=$(git tag -l "v1.0.*-pre-$SANITIZED_BRANCH" --merged "origin/$CURRENT_BRANCH" --sort=-version:refname | head -n1)
            
            if [ -z "$LATEST_MAIN_TAG" ]; then
              echo "No v1.0.X tag found on main, using base version 1.0.0"
              BASE_PATCH=0
            else
              echo "Latest main tag found: $LATEST_MAIN_TAG"
              BASE_PATCH=$(echo "$LATEST_MAIN_TAG" | sed 's/v1\.0\.\([0-9]*\)/\1/')
            fi
            
            if [ -z "$LATEST_PRE_TAG" ]; then
              echo "No pre-release tag found for this branch, starting with incremented base"
              NEW_PATCH=$((BASE_PATCH + 1))
              NEW_VERSION="v1.0.$NEW_PATCH-pre-$SANITIZED_BRANCH"
            else
              echo "Latest pre-release tag found: $LATEST_PRE_TAG"
              # Extract the patch version from pre-release tag and increment it
              PRE_PATCH=$(echo "$LATEST_PRE_TAG" | sed 's/v1\.0\.\([0-9]*\)-pre-.*/\1/')
              NEW_PATCH=$((PRE_PATCH + 1))
              NEW_VERSION="v1.0.$NEW_PATCH-pre-$SANITIZED_BRANCH"
            fi
          fi
          
          echo "New version will be: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag
          git tag -a "$NEW_VERSION" -m "Auto-generated tag $NEW_VERSION for commit ${{ github.sha }}"
          
          # Push the tag
          git push origin "$NEW_VERSION"
          
          echo "Created and pushed tag: $NEW_VERSION"