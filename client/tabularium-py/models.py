# generated by datamodel-codegen:
#   filename:  api.yaml
#   timestamp: 2025-04-18T11:25:38+00:00

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Account(BaseModel):
    config: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Secret configuration map associated with the account.',
            examples=['{"service_principal_token": "103713408v0871v"}'],
        ),
    ] = None
    key: Annotated[
        str,
        Field(
            description='Unique key for the account record.',
            examples=['#account#name#member#value'],
        ),
    ]
    member: Annotated[
        str,
        Field(
            description='The user or system granted access to this account.',
            examples=['amazon'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='The owner of the account.',
            examples=['chariot.customer@example.com'],
        ),
    ]
    settings: Annotated[
        Optional[List[int]],
        Field(
            description='Raw JSON message containing specific settings.',
            examples=['{"notifications": true}'],
        ),
    ] = None
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the account record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the account info was last updated (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the account.',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        str,
        Field(
            description='The identifier for this account within the context of member.',
            examples=['01234567890'],
        ),
    ]


class Asset(BaseModel):
    class_: Annotated[
        str,
        Field(
            alias='class',
            description='Classification of the asset type.',
            examples=['domain'],
        ),
    ]
    comment: Annotated[
        Optional[str],
        Field(
            description='User-provided comment about the asset.',
            examples=['Initial asset discovery'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the asset was first created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    dns: Annotated[
        str,
        Field(
            description='The DNS name, or group identifier associated with this asset.',
            examples=['example.com'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the asset.',
            examples=['#asset#dns#name'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Name of the asset, or the same value as DNS if this asset represents the group.',
            examples=['169.254.169.254'],
        ),
    ]
    private: Annotated[
        bool,
        Field(
            description='Flag indicating if the asset is considered private (e.g., internal IP).',
            examples=['false'],
        ),
    ]
    secret: Annotated[
        Optional[str],
        Field(
            description='Key of the secret to be used with this asset.',
            examples=['#asset#amazon#0123456789012'],
        ),
    ] = None
    source: Annotated[
        str,
        Field(
            description='Source that added this to the system (one of self, account, seed)',
            examples=['seed'],
        ),
    ]
    status: Annotated[
        str, Field(description='Current status of the asset.', examples=['A'])
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the asset record (in hours).',
            examples=['168'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='The username associated with this asset.',
            examples=['user@example.com'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the asset was last visited (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class Attribute(BaseModel):
    capability: Annotated[
        Optional[str],
        Field(
            description='Capability that discovered this attribute.',
            examples=['portscan'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the attribute was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the attribute.',
            examples=['#attribute#open_port#80#asset#example.com#example.com'],
        ),
    ]
    metadata: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Additional metadata associated with the attribute.',
            examples=['{"tool": "masscan"}'],
        ),
    ] = None
    name: Annotated[
        str, Field(description='Name of the attribute.', examples=['https'])
    ]
    parent: Annotated[Optional[Dict[str, Any]], Field(description='Parent model.')] = (
        None
    )
    source: Annotated[
        str,
        Field(
            description='Key of the parent model this attribute belongs to.',
            examples=['#asset#example.com#example.com'],
        ),
    ]
    status: Annotated[
        str, Field(description='Status of the attribute.', examples=['A'])
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the attribute record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the attribute.',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        str, Field(description='Value of the attribute.', examples=['443'])
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the attribute was last visited or confirmed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class BaseRelationship(BaseModel):
    capability: Annotated[
        str,
        Field(
            description='The capability or tool that discovered/created this relationship.',
            examples=['portscan'],
        ),
    ]
    created: Annotated[
        str,
        Field(
            description='Timestamp when the relationship was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the relationship.',
            examples=['<source_key>#DISCOVERED#<target_key>'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the relationship was last visited or confirmed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class CPE(BaseModel):
    edition: Annotated[
        str, Field(description='Edition information.', examples=['professional'])
    ]
    language: Annotated[str, Field(description='Language tag.', examples=['en-us'])]
    other: Annotated[
        str, Field(description='Other relevant information.', examples=['oem'])
    ]
    part: Annotated[
        str,
        Field(
            description='CPE part (h=hardware, o=os, a=application).', examples=['a']
        ),
    ]
    product: Annotated[str, Field(description='Product name.', examples=['windows_10'])]
    swEdition: Annotated[str, Field(description='Software edition.', examples=['home'])]
    targetHw: Annotated[
        str, Field(description='Target hardware environment.', examples=['x64'])
    ]
    targetSw: Annotated[
        str, Field(description='Target software environment.', examples=['windows'])
    ]
    update: Annotated[
        str, Field(description='Update or service pack.', examples=['sp1'])
    ]
    vendor: Annotated[str, Field(description='Vendor name.', examples=['microsoft'])]
    version: Annotated[
        str, Field(description='Version identifier.', examples=['10.0.19042'])
    ]


class Condition(BaseModel):
    key: Annotated[
        str,
        Field(
            description='Unique key for the condition.',
            examples=['#condition#exposure-open_port-80'],
        ),
    ]
    name: Annotated[
        str,
        Field(description='Name of the condition or attribute.', examples=['https']),
    ]
    source: Annotated[
        str,
        Field(description='Source of the condition information.', examples=['system']),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the condition was last updated (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the condition.',
            examples=['system'],
        ),
    ]
    value: Annotated[
        str, Field(description='Value associated with the condition.', examples=['443'])
    ]


class CvssMetrics(BaseModel):
    base_score: Annotated[
        Optional[float], Field(description='CVSS base score.', examples=['9.8'])
    ] = None
    base_severity: Annotated[
        Optional[str],
        Field(description='CVSS base severity rating.', examples=['Critical']),
    ] = None
    base_vector: Annotated[
        Optional[str],
        Field(
            description='CVSS base vector string.',
            examples=['CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'],
        ),
    ] = None
    exploit_maturity: Annotated[
        Optional[str],
        Field(description='Exploit maturity level.', examples=['Proof-of-Concept']),
    ] = None
    exploitability_score: Annotated[
        Optional[float],
        Field(description='CVSS exploitability subscore.', examples=['3.9']),
    ] = None
    impact_score: Annotated[
        Optional[float], Field(description='CVSS impact subscore.', examples=['5.9'])
    ] = None
    metric_group: Annotated[
        str,
        Field(description='Metric group (Base, Temporal, Threat).', examples=['Base']),
    ]
    temporal_score: Annotated[
        Optional[float], Field(description='CVSS temporal score.', examples=['8.1'])
    ] = None
    temporal_vector: Annotated[
        Optional[str],
        Field(description='CVSS temporal vector string.', examples=['E:P/RL:O/RC:C']),
    ] = None
    threat_score: Annotated[
        Optional[float],
        Field(description='CVSS threat score (v4.0+).', examples=['9.1']),
    ] = None
    threat_severity: Annotated[
        Optional[str],
        Field(description='CVSS threat severity (v4.0+).', examples=['High']),
    ] = None
    type: Annotated[
        str,
        Field(
            description='Type of CVSS metric (Primary or Secondary).',
            examples=['Primary'],
        ),
    ]
    version: Annotated[
        str,
        Field(
            description='CVSS version (e.g., v2, v3.0, v3.1, v4.0).', examples=['v3.1']
        ),
    ]


class Data(BaseModel):
    count: Annotated[
        Optional[int], Field(description='A singular count value.', examples=['150'])
    ] = None
    counts: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='A map of named counts.',
            examples=['{"active": 100, "pending": 50}'],
        ),
    ] = None
    values: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='A map of named float values.',
            examples=['{"average_score": 8.5}'],
        ),
    ] = None


class Discovered(BaseModel):
    pass


class Epss(BaseModel):
    percentile: Annotated[
        Optional[float], Field(description='EPSS percentile rank.', examples=['0.99'])
    ] = None
    score: Annotated[
        Optional[float],
        Field(
            description='EPSS score (probability of exploitation).', examples=['0.95']
        ),
    ] = None


class ExploitCounts(BaseModel):
    botnets: Annotated[
        int,
        Field(
            description='Number of botnets associated with exploits.', examples=['1']
        ),
    ]
    exploits: Annotated[
        int, Field(description='Total number of known exploits.', examples=['5'])
    ]
    ransomware_families: Annotated[
        int,
        Field(
            description='Number of ransomware families associated with exploits.',
            examples=['2'],
        ),
    ]
    threat_actors: Annotated[
        int,
        Field(
            description='Number of threat actors associated with exploits.',
            examples=['3'],
        ),
    ]


class ExploitTimeline(BaseModel):
    cisa_kev_date_added: Annotated[
        Optional[str],
        Field(
            description='Date added to CISA KEV catalog (RFC3339).',
            examples=['2023-01-10T00:00:00Z'],
        ),
    ] = None
    cisa_kev_date_due: Annotated[
        Optional[str],
        Field(
            description='Due date for patching according to CISA KEV (RFC3339).',
            examples=['2023-01-31T00:00:00Z'],
        ),
    ] = None
    first_exploit_published: Annotated[
        Optional[str],
        Field(
            description='Date the first exploit was published (RFC3339).',
            examples=['2022-12-01T00:00:00Z'],
        ),
    ] = None
    first_exploit_published_weaponized_or_higher: Annotated[
        Optional[str],
        Field(
            description='Date the first weaponized (or higher) exploit was published (RFC3339).',
            examples=['2022-12-15T00:00:00Z'],
        ),
    ] = None
    first_reported_botnet: Annotated[
        Optional[str],
        Field(
            description='Date the first associated botnet was reported (RFC3339).',
            examples=['2023-02-01T00:00:00Z'],
        ),
    ] = None
    first_reported_ransomware: Annotated[
        Optional[str],
        Field(
            description='Date the first associated ransomware was reported (RFC3339).',
            examples=['2023-01-20T00:00:00Z'],
        ),
    ] = None
    first_reported_threat_actor: Annotated[
        Optional[str],
        Field(
            description='Date the first associated threat actor was reported (RFC3339).',
            examples=['2023-01-05T00:00:00Z'],
        ),
    ] = None
    most_recent_exploit_published: Annotated[
        Optional[str],
        Field(
            description='Date the most recent exploit was published (RFC3339).',
            examples=['2023-03-01T00:00:00Z'],
        ),
    ] = None
    most_recent_reported_botnet: Annotated[
        Optional[str],
        Field(
            description='Date the most recent associated botnet was reported (RFC3339).',
            examples=['2023-03-10T00:00:00Z'],
        ),
    ] = None
    most_recent_reported_ransomware: Annotated[
        Optional[str],
        Field(
            description='Date the most recent associated ransomware was reported (RFC3339).',
            examples=['2023-02-20T00:00:00Z'],
        ),
    ] = None
    most_recent_reported_threat_actor: Annotated[
        Optional[str],
        Field(
            description='Date the most recent associated threat actor was reported (RFC3339).',
            examples=['2023-02-15T00:00:00Z'],
        ),
    ] = None
    nvd_last_modified: Annotated[
        Optional[str],
        Field(
            description='NVD last modified date (RFC3339).',
            examples=['2023-04-01T10:00:00Z'],
        ),
    ] = None
    nvd_published: Annotated[
        Optional[str],
        Field(
            description='NVD published date (RFC3339).',
            examples=['2022-11-01T00:00:00Z'],
        ),
    ] = None
    vulncheck_kev_date_added: Annotated[
        Optional[str],
        Field(
            description='Date added to VulnCheck KEV (RFC3339).',
            examples=['2023-01-11T00:00:00Z'],
        ),
    ] = None
    vulncheck_kev_date_due: Annotated[
        Optional[str],
        Field(
            description='Due date for patching according to VulnCheck KEV (RFC3339).',
            examples=['2023-02-01T00:00:00Z'],
        ),
    ] = None


class Exploits(BaseModel):
    counts: Optional[ExploitCounts] = None
    timeline: Optional[ExploitTimeline] = None


class File(BaseModel):
    key: Annotated[
        str,
        Field(
            description='Unique key for the file record.',
            examples=['#file#proofs/scan.txt'],
        ),
    ]
    name: Annotated[
        str,
        Field(description='Name or path of the file.', examples=['proofs/scan.txt']),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the file record was last updated (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the file.',
            examples=['user@example.com'],
        ),
    ]


class Flag(BaseModel):
    key: Annotated[
        str, Field(description='Unique key for the flag.', examples=['#flag#feature-x'])
    ]
    name: Annotated[
        str, Field(description='Name of the feature flag.', examples=['feature-x'])
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the flag.',
            examples=['user@example.com'],
        ),
    ]


class HasAttribute(BaseModel):
    capability: Annotated[
        str,
        Field(
            description='The capability or tool that discovered/created this relationship.',
            examples=['portscan'],
        ),
    ]
    created: Annotated[
        str,
        Field(
            description='Timestamp when the relationship was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the relationship.',
            examples=['<source_key>#DISCOVERED#<target_key>'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the relationship was last visited or confirmed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class HasTechnology(BaseModel):
    pass


class HasVulnerability(BaseModel):
    pass


class HistoryRecord(BaseModel):
    affiliationVerdict: Annotated[
        Optional[str],
        Field(
            description='Affiliation verdict from an ML model, if applicable.',
            examples=['Affiliated'],
        ),
    ] = None
    base: Annotated[
        Optional[str],
        Field(
            description='Identifier of the ML model used for the prediction, if applicable.',
            examples=['affiliation-model-v1.2'],
        ),
    ] = None
    by: Annotated[
        Optional[str],
        Field(
            description='Identifier of the user or system that made the change.',
            examples=['user@example.com'],
        ),
    ] = None
    comment: Annotated[
        Optional[str],
        Field(
            description='Comment associated with the history event.',
            examples=['Asset confirmed via scan.'],
        ),
    ] = None
    filePath: Annotated[
        Optional[str],
        Field(
            description='Path to a related file, if applicable.',
            examples=['proofs/evidence.png'],
        ),
    ] = None
    from_: Annotated[
        Optional[str],
        Field(
            alias='from', description='The previous state or value.', examples=['TL']
        ),
    ] = None
    logit: Annotated[
        Optional[float],
        Field(
            description='Logit value from an ML model prediction, if applicable.',
            examples=['0.85'],
        ),
    ] = None
    to: Annotated[
        Optional[str], Field(description='The new state or value.', examples=['OL'])
    ] = None
    updated: Annotated[
        Optional[str],
        Field(
            description='Timestamp of the history event (RFC3339).',
            examples=['2023-10-27T11:05:00Z'],
        ),
    ] = None


class InstanceOf(BaseModel):
    pass


class MLProperties(BaseModel):
    agent: Annotated[
        Optional[str],
        Field(
            description='Name of the agent that provided the ML properties.',
            examples=['autotriage'],
        ),
    ] = None
    logit: Annotated[
        Optional[float],
        Field(
            description='Logit value from an ML model prediction.', examples=['0.75']
        ),
    ] = None
    proofSufficient: Annotated[
        Optional[bool],
        Field(
            description='Indicates if ML model considers proof sufficient for auto-triage.',
            examples=['true'],
        ),
    ] = None


class Metadata(BaseModel):
    asname: Annotated[
        Optional[str], Field(description='Autonomous System name.', examples=['GOOGLE'])
    ] = None
    asnumber: Annotated[
        Optional[str],
        Field(description='Autonomous System number.', examples=['AS15169']),
    ] = None
    asrange: Annotated[
        Optional[str],
        Field(description='Autonomous System IP range.', examples=['172.217.0.0/16']),
    ] = None
    city: Annotated[
        Optional[str],
        Field(
            description='City associated with the asset.', examples=['Mountain View']
        ),
    ] = None
    cloudAccount: Annotated[
        Optional[str],
        Field(
            description='Specific account identifier within the cloud provider.',
            examples=['billing-account-id'],
        ),
    ] = None
    cloudId: Annotated[
        Optional[str],
        Field(
            description='Unique identifier within the cloud provider.',
            examples=['project-id-12345'],
        ),
    ] = None
    cloudRoot: Annotated[
        Optional[str],
        Field(
            description='Root identifier for the cloud environment (e.g., organization ID).',
            examples=['organizations/1234567890'],
        ),
    ] = None
    cloudService: Annotated[
        Optional[str],
        Field(
            description='Name of the cloud service provider (e.g., AWS, GCP, Azure).',
            examples=['GCP'],
        ),
    ] = None
    country: Annotated[
        Optional[str],
        Field(description='Country associated with the asset.', examples=['US']),
    ] = None
    expiration: Annotated[
        Optional[str],
        Field(
            description='Date the asset registration expires (RFC3339).',
            examples=['2024-09-15T00:00:00Z'],
        ),
    ] = None
    province: Annotated[
        Optional[str],
        Field(
            description='Province or state associated with the asset.',
            examples=['California'],
        ),
    ] = None
    purchased: Annotated[
        Optional[str],
        Field(
            description='Date the asset (e.g., domain) was purchased (RFC3339).',
            examples=['2002-09-15T00:00:00Z'],
        ),
    ] = None
    registrant: Annotated[
        Optional[str],
        Field(
            description='Registered owner of the asset (e.g., domain).',
            examples=['Google LLC'],
        ),
    ] = None
    registrar: Annotated[
        Optional[str],
        Field(
            description='Registrar managing the asset (e.g., domain).',
            examples=['MarkMonitor Inc.'],
        ),
    ] = None
    surface: Annotated[
        Optional[List[str]],
        Field(
            description='List of attack surface identifiers related to the asset.',
            examples=['["web", "dns"]'],
        ),
    ] = None
    updated: Annotated[
        Optional[str],
        Field(
            description='Date the asset registration was last updated (RFC3339).',
            examples=['2023-09-15T10:00:00Z'],
        ),
    ] = None


class MitreTechnique(BaseModel):
    domain: Annotated[
        Optional[str],
        Field(description='MITRE ATT&CK domain.', examples=['enterprise-attack']),
    ] = None
    id: Annotated[
        Optional[str],
        Field(description='MITRE ATT&CK technique ID.', examples=['T1566']),
    ] = None
    name: Annotated[
        Optional[str],
        Field(description='MITRE ATT&CK technique name.', examples=['Phishing']),
    ] = None
    subtechnique: Annotated[
        Optional[bool],
        Field(description='Indicates if this is a sub-technique.', examples=['false']),
    ] = None
    tactics: Annotated[
        Optional[List],
        Field(
            description='List of MITRE ATT&CK tactics associated with the technique.',
            examples=['["initial-access"]'],
        ),
    ] = None
    url: Annotated[
        Optional[str],
        Field(
            description='URL for more information about the technique.',
            examples=['https://attack.mitre.org/techniques/T1566/'],
        ),
    ] = None


class Preseed(BaseModel):
    capability: Annotated[
        Optional[str],
        Field(
            description='Capability associated with processing this preseed record.',
            examples=['whois-lookup'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the preseed record was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    display: Annotated[
        str,
        Field(
            description='Hint for UI display type (e.g., text, image, base64).',
            examples=['text'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the preseed record.',
            examples=['#preseed#whois#registrant_email#test@example.com'],
        ),
    ]
    status: Annotated[
        str, Field(description='Status of the preseed record.', examples=['A'])
    ]
    title: Annotated[
        str,
        Field(
            description='Title or category within the preseed type.',
            examples=['registrant_email'],
        ),
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the preseed record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    type: Annotated[
        str, Field(description='Type of the preseed data.', examples=['whois'])
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the preseed record.',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        str,
        Field(description='The actual preseed value.', examples=['test@example.com']),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the preseed record was last visited or processed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class Risk(BaseModel):
    comment: Annotated[
        Optional[str],
        Field(
            description='User-provided comment about the risk.',
            examples=['Confirmed by manual check'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the risk was first created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    dns: Annotated[
        str,
        Field(
            description='Primary DNS or group associated with the risk.',
            examples=['example.com'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the risk.',
            examples=['#risk#example.com#CVE-2023-12345'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Name of the risk or vulnerability.',
            examples=['CVE-2023-12345'],
        ),
    ]
    priority: Annotated[
        int,
        Field(
            description='Calculated priority score based on severity.', examples=['10']
        ),
    ]
    source: Annotated[
        str, Field(description='Source that identified the risk.', examples=['nessus'])
    ]
    status: Annotated[
        str,
        Field(
            description='Current status of the risk (e.g., TH, OC, RM).',
            examples=['TH'],
        ),
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the risk record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the risk was last updated (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the risk.',
            examples=['user@example.com'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the risk was last visited or confirmed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class RiskDefinition(BaseModel):
    Description: Annotated[
        str,
        Field(
            description='Description of the risk or vulnerability.',
            examples=['This vulnerability allows...'],
        ),
    ]
    Impact: Annotated[
        str,
        Field(
            description='Potential impact if the risk is exploited.',
            examples=['Remote code execution.'],
        ),
    ]
    Recommendation: Annotated[
        str,
        Field(
            description='Recommended actions to mitigate the risk.',
            examples=['Apply vendor patch XYZ.'],
        ),
    ]
    References: Annotated[
        str,
        Field(
            description='Supporting references or links.',
            examples=[
                'https://nvd.nist.gov/vuln/detail/CVE-2023-12345\nhttps://vendor.com/security/advisory'
            ],
        ),
    ]


class Seed(BaseModel):
    class_: Annotated[
        str,
        Field(
            alias='class',
            description='Classification of the seed type (e.g., domain, tld, ip, cidr).',
            examples=['domain'],
        ),
    ]
    comment: Annotated[
        Optional[str],
        Field(
            description='User-provided comment about the seed.',
            examples=['Initial customer seed'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the seed was created (RFC3339).',
            examples=['2023-10-27T09:00:00Z'],
        ),
    ]
    dns: Annotated[
        str,
        Field(
            description='The DNS name or IP address of the seed.',
            examples=['example.com'],
        ),
    ]
    email: Annotated[
        Optional[str],
        Field(
            description='Optional contact email associated with the seed.',
            examples=['contact@example.com'],
        ),
    ] = None
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the seed.',
            examples=['#seed#domain#example.com'],
        ),
    ]
    location: Annotated[
        Optional[str],
        Field(
            description='Optional location associated with the seed.',
            examples=['Headquarters'],
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description='Optional name associated with the seed (e.g., company name).',
            examples=['Example Corp'],
        ),
    ] = None
    registrar: Annotated[
        Optional[str],
        Field(
            description='Optional registrar information for the seed (if domain).',
            examples=['MarkMonitor Inc.'],
        ),
    ] = None
    source: Annotated[
        Optional[str],
        Field(description='Source from which the seed was obtained.', examples=['ns1']),
    ] = None
    status: Annotated[
        str,
        Field(
            description='Composite of the current status of the seed and the seed type.',
            examples=['domain#P'],
        ),
    ]
    type: Annotated[
        str,
        Field(
            description='Broader type category (e.g., domain, ip).', examples=['domain']
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the seed.',
            examples=['user@example.com'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the seed was last processed or visited (RFC3339).',
            examples=['2023-10-27T09:30:00Z'],
        ),
    ]


class Setting(BaseModel):
    key: Annotated[
        str,
        Field(
            description='Unique key for the setting.',
            examples=['#setting#notification_email'],
        ),
    ]
    name: Annotated[
        str, Field(description='Name of the setting.', examples=['notification_email'])
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the setting (if user-specific).',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        Dict[str, Any],
        Field(description='Value of the setting.', examples=['admin@example.com']),
    ]


class Ssvc(BaseModel):
    automatable: Annotated[
        Optional[str], Field(description='SSVC automatable status.', examples=['yes'])
    ] = None
    exploitation: Annotated[
        Optional[str],
        Field(description='SSVC exploitation status.', examples=['active']),
    ] = None
    source: Annotated[
        Optional[str],
        Field(description='Source of the SSVC assessment.', examples=['CISA']),
    ] = None
    technical_impact: Annotated[
        Optional[str],
        Field(description='SSVC technical impact level.', examples=['total']),
    ] = None


class Statistic(BaseModel):
    created: Annotated[
        str,
        Field(
            description="Timestamp when the statistic was generated (RFC3339 or 'now').",
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    data: Data
    key: Annotated[
        str,
        Field(
            description='Unique key for the statistic record.',
            examples=['#statistic#asset_count#global#2023-10-27T00:00:00Z#all'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='The specific name or scope of the statistic.',
            examples=['global'],
        ),
    ]
    store: Annotated[
        bool,
        Field(
            description='Flag indicating if this statistic should be stored long-term.',
            examples=['true'],
        ),
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the statistic record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    type: Annotated[
        str,
        Field(
            description='The type or category of the statistic.',
            examples=['asset_count'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the statistic.',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        str,
        Field(
            description='A specific value or sub-category for the statistic.',
            examples=['all'],
        ),
    ]


class TargetWrapper(BaseModel):
    Target: Dict[str, Any]


class Technology(BaseModel):
    comment: Annotated[
        Optional[str],
        Field(
            description='User-provided comment about the technology record.',
            examples=['Found on main web server'],
        ),
    ] = None
    cpe: Annotated[
        str,
        Field(
            description='The full CPE string representation.',
            examples=['cpe:2.3:a:apache:http_server:2.4.50:*:*:*:*:*:*:*'],
        ),
    ]
    created: Annotated[
        str,
        Field(
            description='Timestamp when the technology record was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    edition: Annotated[
        str, Field(description='Edition information.', examples=['professional'])
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the technology (based on CPE string).',
            examples=['#technology#cpe:2.3:a:apache:http_server:2.4.50:*:*:*:*:*:*:*'],
        ),
    ]
    language: Annotated[str, Field(description='Language tag.', examples=['en-us'])]
    name: Annotated[
        Optional[str],
        Field(
            description='Optional common name for the technology.',
            examples=['Apache httpd'],
        ),
    ] = None
    other: Annotated[
        str, Field(description='Other relevant information.', examples=['oem'])
    ]
    part: Annotated[
        str,
        Field(
            description='CPE part (h=hardware, o=os, a=application).', examples=['a']
        ),
    ]
    product: Annotated[str, Field(description='Product name.', examples=['windows_10'])]
    source: Annotated[
        Optional[str],
        Field(
            description='Source that identified this technology.',
            examples=['wappalyzer'],
        ),
    ] = None
    swEdition: Annotated[str, Field(description='Software edition.', examples=['home'])]
    targetHw: Annotated[
        str, Field(description='Target hardware environment.', examples=['x64'])
    ]
    targetSw: Annotated[
        str, Field(description='Target software environment.', examples=['windows'])
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the technology record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    update: Annotated[
        str, Field(description='Update or service pack.', examples=['sp1'])
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the technology record.',
            examples=['user@example.com'],
        ),
    ]
    vendor: Annotated[str, Field(description='Vendor name.', examples=['microsoft'])]
    version: Annotated[
        str, Field(description='Version identifier.', examples=['10.0.19042'])
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the technology was last visited or confirmed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class Threat(BaseModel):
    created: Annotated[
        str,
        Field(
            description='Timestamp associated with the threat data creation (often includes feed name).',
            examples=['#threat#vulncheck#2023-11-01T00:00:00Z'],
        ),
    ]
    data: Annotated[
        Dict[str, Any],
        Field(
            description='The actual threat intelligence data.',
            examples=['{"cvss": 9.8, "exploits": ["metasploit"]}'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the threat record.',
            examples=['#threat#vulncheck#CVE-2023-12345'],
        ),
    ]
    source: Annotated[
        str,
        Field(
            description='Identifier for the source of the threat data (e.g., CVE ID).',
            examples=['CVE-2023-12345'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the threat record was last updated (RFC3339).',
            examples=['2023-11-10T12:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the threat data.',
            examples=['system'],
        ),
    ]


class ThreatActor(BaseModel):
    aliases: Annotated[
        List[str],
        Field(
            description='Known aliases for the threat actor.',
            examples=['["Fancy Bear", "Sofacy Group"]'],
        ),
    ]
    categories: Annotated[
        List[str],
        Field(
            description='Categories the threat actor falls into.',
            examples=['["State-Sponsored", "Espionage"]'],
        ),
    ]
    country: Annotated[
        Optional[str],
        Field(description='Country associated with the threat actor.', examples=['RU']),
    ] = None
    name: Annotated[
        str, Field(description='Name of the threat actor group.', examples=['APT28'])
    ]


class Vulnerability(BaseModel):
    cvss: Annotated[
        Optional[float],
        Field(
            description='Highest CVSS base score associated with the vulnerability.',
            examples=['9.8'],
        ),
    ] = None
    epss: Annotated[
        Optional[float],
        Field(
            description='EPSS score (probability of exploitation).', examples=['0.95']
        ),
    ] = None
    exploit: Annotated[
        bool,
        Field(
            description='Indicates if there is known public exploit code available.',
            examples=['true'],
        ),
    ]
    id: Annotated[
        str,
        Field(
            description='Identifier for the vulnerability (e.g., CVE ID).',
            examples=['CVE-2023-12345'],
        ),
    ]
    kev: Annotated[
        bool,
        Field(
            description='Indicates if the vulnerability is listed in the CISA KEV catalog.',
            examples=['true'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the vulnerability.',
            examples=['#vulnerability#CVE-2023-12345'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the vulnerability record (usually global).',
            examples=['global'],
        ),
    ]


class Weakness(BaseModel):
    name: Annotated[
        Optional[str],
        Field(
            description='Name of the weakness.',
            examples=[
                "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
        ),
    ] = None
    source: Annotated[
        Optional[str],
        Field(
            description='Source of the weakness information (e.g., NVD).',
            examples=['NVD'],
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description='Type of weakness classification (Primary or Secondary).',
            examples=['Primary'],
        ),
    ] = None
    url: Annotated[
        Optional[str],
        Field(
            description='URL for more information about the weakness.',
            examples=['https://cwe.mitre.org/data/definitions/79.html'],
        ),
    ] = None
    value: Annotated[
        Optional[str],
        Field(description='Weakness identifier (e.g., CWE ID).', examples=['CWE-79']),
    ] = None


class Enrichment(BaseModel):
    cvss: Annotated[
        Optional[List[CvssMetrics]],
        Field(description='List of associated CVSS metrics.'),
    ] = None
    description: Annotated[
        str,
        Field(
            description='Detailed description of the vulnerability or enrichment context.',
            examples=['A remote code execution vulnerability exists...'],
        ),
    ]
    epss: Optional[Epss] = None
    exploits: Optional[Exploits] = None
    id: Annotated[
        str,
        Field(
            description='Unique identifier for the enrichment data (often CVE ID).',
            examples=['CVE-2023-12345'],
        ),
    ]
    is_kev: Annotated[
        bool,
        Field(
            description='Indicates if the vulnerability is listed in the CISA KEV catalog.',
            examples=['true'],
        ),
    ]
    mitre_techniques: Annotated[
        Optional[List[MitreTechnique]],
        Field(description='List of associated MITRE ATT&CK techniques.'),
    ] = None
    modified: Annotated[
        str,
        Field(
            description='Date the vulnerability or enrichment data was last modified (RFC3339).',
            examples=['2023-11-10T12:00:00Z'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Common name or title (e.g., from KEV).',
            examples=['Microsoft Exchange Server Remote Code Execution Vulnerability'],
        ),
    ]
    published: Annotated[
        str,
        Field(
            description='Date the vulnerability or enrichment data was published (RFC3339).',
            examples=['2023-11-01T00:00:00Z'],
        ),
    ]
    ssvc: Annotated[
        Optional[List[Ssvc]], Field(description='List of associated SSVC assessments.')
    ] = None
    threat_actors: Annotated[
        Optional[List[ThreatActor]],
        Field(description='List of associated threat actors.'),
    ] = None
    weaknesses: Annotated[
        Optional[List[Weakness]],
        Field(description='List of associated weaknesses (e.g., CWEs).'),
    ] = None


class History(BaseModel):
    history: Annotated[
        Optional[List[HistoryRecord]],
        Field(description='List of history records detailing changes.'),
    ] = None
    remove: Annotated[
        Optional[int],
        Field(
            description='Index of the history record to remove (used for updates, not stored).',
            examples=['0'],
        ),
    ] = None


class Job(BaseModel):
    Origin: TargetWrapper
    Queue: Annotated[
        str, Field(description='Target queue for the job.', examples=['standard'])
    ]
    capabilities: Annotated[
        Optional[List[str]],
        Field(
            description='List of specific capabilities to run for this job.',
            examples=['["portscan", "nuclei"]'],
        ),
    ] = None
    comment: Annotated[
        Optional[str],
        Field(
            description='Optional comment about the job.',
            examples=['Scanning standard web ports'],
        ),
    ] = None
    config: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Configuration parameters for the job capability.',
            examples=['{"test": "cve-1111-2222"}'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the job was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    dns: Annotated[
        str,
        Field(
            description="Primary DNS associated with the job's target.",
            examples=['example.com'],
        ),
    ]
    full: Annotated[
        Optional[bool],
        Field(description='Indicates if this is a full scan job.', examples=['false']),
    ] = None
    key: Annotated[
        str,
        Field(
            description='Unique key for the job.',
            examples=['#job#example.com#asset#portscan'],
        ),
    ]
    name: Annotated[
        Optional[str],
        Field(
            description='The IP address this job was executed from',
            examples=['1.2.3.4'],
        ),
    ] = None
    parent: Optional[TargetWrapper] = None
    source: Annotated[
        str,
        Field(
            description='The source or capability that generated this job.',
            examples=['portscan'],
        ),
    ]
    status: Annotated[
        str,
        Field(
            description='Current status of the job (e.g., JQ#portscan).',
            examples=['JQ#portscan'],
        ),
    ]
    target: TargetWrapper
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the job record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the job was last updated (RFC3339).',
            examples=['2023-10-27T10:05:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Username who initiated or owns the job.',
            examples=['user@example.com'],
        ),
    ]


class Result(BaseModel):
    Item: Annotated[Dict[str, Any], Field(description='The actual result item.')]
    job: Job
