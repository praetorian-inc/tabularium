# generated by datamodel-codegen:
#   filename:  api.yaml
#   timestamp: 2025-09-29T15:31:41+00:00

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Access(BaseModel):
    BaseModel: Dict[str, Any]
    email: Optional[str] = None
    key: Annotated[
        str,
        Field(
            description='Unique key for the access record.',
            examples=['#access#type#value#id'],
        ),
    ]
    name: Optional[str] = None
    sub: Annotated[str, Field(description='The Cognito sub of this user')]
    type: str
    updated: str
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the account.',
            examples=['user@example.com'],
        ),
    ]
    value: Optional[str] = None


class Account(BaseModel):
    BaseModel: Dict[str, Any]
    key: Annotated[
        str,
        Field(
            description='Unique key for the account record.',
            examples=['#account#name#member#value'],
        ),
    ]
    member: Annotated[
        str,
        Field(
            description='The user or system granted access to this account.',
            examples=['amazon'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='The owner of the account.',
            examples=['chariot.customer@example.com'],
        ),
    ]
    secret: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Secret configuration map associated with the account.',
            examples=['{"service_principal_token": "103713408v0871v"}'],
        ),
    ] = None
    settings: Annotated[
        Optional[List[int]],
        Field(
            description='Raw JSON message containing specific settings.',
            examples=['{"notifications": true}'],
        ),
    ] = None
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the account record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the account info was last updated (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the account.',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        str,
        Field(
            description='The identifier for this account within the context of member.',
            examples=['01234567890'],
        ),
    ]


class Adaiaca(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adcerttemplate(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adcomputer(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adcontainer(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Addomain(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adenterpriseca(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adgpo(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adgroup(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adissuancepolicy(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adlocalgroup(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adlocaluser(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adntauthstore(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adobject(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adou(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Adrelationship(BaseModel):
    BaseRelationship: Dict[str, Any]
    relationshipType: str


class Adrootca(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class Aduser(BaseModel):
    ADProperties: Dict[str, Any]
    BaseAsset: Dict[str, Any]
    ModelAlias: Dict[str, Any]
    domain: Annotated[
        str,
        Field(
            description='AD domain this object belongs to.', examples=['example.local']
        ),
    ]
    label: Annotated[str, Field(description='Label of the object.', examples=['user'])]
    objectid: Annotated[
        str,
        Field(
            description='Object identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ]
    sid: Annotated[
        Optional[str],
        Field(
            description='Security identifier.',
            examples=['S-1-5-21-123456789-123456789-123456789-1001'],
        ),
    ] = None


class AegisMgmt(BaseModel):
    BaseModel: Dict[str, Any]
    aegisAgentId: Annotated[
        Optional[str],
        Field(
            description='Specific Aegis agent ID if targeting single agent.',
            examples=['agent-001'],
        ),
    ] = None
    aegisClientId: Annotated[
        str,
        Field(
            description='Aegis client ID target for the management operation.',
            examples=['C.12345abcdef'],
        ),
    ]
    aegisManagementCapability: Annotated[
        str,
        Field(
            description='Name of the Aegis management capability.',
            examples=['tunnel_management'],
        ),
    ]
    async_: Annotated[
        bool,
        Field(
            alias='async',
            description='Whether the Aegis management task is asynchronous.',
            examples=['true'],
        ),
    ]
    commandResult: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Detailed command execution result including exit code and output.'
        ),
    ] = None
    completed: Annotated[
        Optional[str],
        Field(
            description='Timestamp when the task completed (RFC3339).',
            examples=['2024-01-15T10:35:00Z'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the task was created (RFC3339).',
            examples=['2024-01-15T10:30:00Z'],
        ),
    ]
    errorMessage: Annotated[
        Optional[str],
        Field(
            description='Error message if the task failed.',
            examples=['Failed to create tunnel: connection timeout'],
        ),
    ] = None
    flowId: Annotated[
        Optional[str],
        Field(
            description='Velociraptor flow ID for tracking execution.',
            examples=['F.D36EN790K9V6G'],
        ),
    ] = None
    healthCheck: Annotated[
        bool,
        Field(
            description='Whether to trigger a healthcheck after task completion.',
            examples=['true'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key for the Aegis management task.',
            examples=[
                '#aegis-mgmt#user@example.com#tunnel_management#2024-01-15T10:30:00Z'
            ],
        ),
    ]
    parameters: Annotated[
        Dict[str, Any],
        Field(
            description='Parameters for the Aegis management capability.',
            examples=['{"tunnel_name": "my-tunnel", "action": "create"}'],
        ),
    ]
    result: Annotated[
        Optional[str],
        Field(
            description='Result data from the Aegis management operation.',
            examples=['{"tunnel_id": "tunnel-123", "status": "active"}'],
        ),
    ] = None
    started: Annotated[
        Optional[str],
        Field(
            description='Timestamp when the task execution started (RFC3339).',
            examples=['2024-01-15T10:31:00Z'],
        ),
    ] = None
    status: Annotated[
        str,
        Field(
            description='Current status of the Aegis management task.',
            examples=['AMT_PENDING'],
        ),
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the task record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the task was last updated (RFC3339).',
            examples=['2024-01-15T10:35:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Username who initiated the Aegis management task.',
            examples=['user@example.com'],
        ),
    ]


class Aegisagent(BaseModel):
    BaseAsset: Dict[str, Any]
    architecture: Annotated[
        str, Field(description='CPU architecture (e.g., amd64, arm64)')
    ]
    client_id: Annotated[str, Field(description='Unique agent identifier')]
    fqdn: Annotated[str, Field(description='Fully-qualified domain name')]
    health_check: Annotated[
        Optional[Dict[str, Any]], Field(description='Latest health check payload')
    ] = None
    hostname: Annotated[str, Field(description='Host short name')]
    last_seen_at: Annotated[
        int, Field(description='Unix timestamp (seconds) of last check-in')
    ]
    network_interfaces: Annotated[
        List[Dict[str, Any]], Field(description='Network interfaces and their IPs')
    ]
    os: Annotated[str, Field(description='Operating system')]
    os_version: Annotated[str, Field(description='Operating system version')]


class Aegismanagement(BaseModel):
    BaseModel: Dict[str, Any]
    async_: Annotated[
        bool,
        Field(
            alias='async',
            description='Indicates if this is an asynchronous management capability',
            examples=['true'],
        ),
    ]
    description: Annotated[
        str,
        Field(
            description='A description of the management capability suitable for human or LLM use',
            examples=['Manages Cloudflare tunnels for secure agent connectivity'],
        ),
    ]
    executor: Annotated[
        str,
        Field(
            description='The task executor that can execute this management capability',
            examples=['aegis'],
        ),
    ]
    healthCheck: Annotated[
        Optional[bool],
        Field(
            description='If true, triggers a healthcheck after the management task completes',
            examples=['true'],
        ),
    ] = None
    integration: Annotated[
        bool,
        Field(
            description='Whether or not this management capability is an integration with an external service',
            examples=['false'],
        ),
    ]
    largeArtifact: Annotated[
        Optional[bool],
        Field(
            description='If true, this management capability generates large artifacts that can be stored and reviewed later',
            examples=['false'],
        ),
    ] = None
    name: Annotated[
        str,
        Field(
            description='The name of the management capability',
            examples=['tunnel_management'],
        ),
    ]
    parameters: Annotated[
        Optional[List[Dict[str, Any]]],
        Field(description='The parameters/options of the management capability'),
    ] = None
    runs_on: Annotated[
        Optional[int],
        Field(
            description='The platform this management capability runs on',
            examples=['linux'],
        ),
    ] = None
    target: Annotated[
        str,
        Field(
            description='The target of the management capability', examples=['agent']
        ),
    ]
    title: Annotated[
        str,
        Field(
            description='The pretty name of the management capability',
            examples=['Cloudflare Tunnel Management'],
        ),
    ]
    version: Annotated[
        str,
        Field(
            description='The version of the management capability (major.minor.patch)',
            examples=['1.0.0'],
        ),
    ]


class Aegismanagementtask(BaseModel):
    BaseModel: Dict[str, Any]
    aegisAgentId: Annotated[
        Optional[str],
        Field(
            description='Specific Aegis agent ID if targeting single agent.',
            examples=['agent-001'],
        ),
    ] = None
    aegisClientId: Annotated[
        str,
        Field(
            description='Aegis client ID target for the management operation.',
            examples=['C.12345abcdef'],
        ),
    ]
    aegisManagementCapability: Annotated[
        str,
        Field(
            description='Name of the Aegis management capability.',
            examples=['tunnel_management'],
        ),
    ]
    async_: Annotated[
        bool,
        Field(
            alias='async',
            description='Whether the Aegis management task is asynchronous.',
            examples=['true'],
        ),
    ]
    commandResult: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Detailed command execution result including exit code and output.'
        ),
    ] = None
    completed: Annotated[
        Optional[str],
        Field(
            description='Timestamp when the task completed (RFC3339).',
            examples=['2024-01-15T10:35:00Z'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the task was created (RFC3339).',
            examples=['2024-01-15T10:30:00Z'],
        ),
    ]
    errorMessage: Annotated[
        Optional[str],
        Field(
            description='Error message if the task failed.',
            examples=['Failed to create tunnel: connection timeout'],
        ),
    ] = None
    flowId: Annotated[
        Optional[str],
        Field(
            description='Velociraptor flow ID for tracking execution.',
            examples=['F.D36EN790K9V6G'],
        ),
    ] = None
    healthCheck: Annotated[
        bool,
        Field(
            description='Whether to trigger a healthcheck after task completion.',
            examples=['true'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key for the Aegis management task.',
            examples=[
                '#aegis-mgmt#user@example.com#tunnel_management#2024-01-15T10:30:00Z'
            ],
        ),
    ]
    parameters: Annotated[
        Dict[str, Any],
        Field(
            description='Parameters for the Aegis management capability.',
            examples=['{"tunnel_name": "my-tunnel", "action": "create"}'],
        ),
    ]
    result: Annotated[
        Optional[str],
        Field(
            description='Result data from the Aegis management operation.',
            examples=['{"tunnel_id": "tunnel-123", "status": "active"}'],
        ),
    ] = None
    started: Annotated[
        Optional[str],
        Field(
            description='Timestamp when the task execution started (RFC3339).',
            examples=['2024-01-15T10:31:00Z'],
        ),
    ] = None
    status: Annotated[
        str,
        Field(
            description='Current status of the Aegis management task.',
            examples=['AMT_PENDING'],
        ),
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the task record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the task was last updated (RFC3339).',
            examples=['2024-01-15T10:35:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Username who initiated the Aegis management task.',
            examples=['user@example.com'],
        ),
    ]


class Aegisparameter(BaseModel):
    BaseModel: Dict[str, Any]
    default: Annotated[
        Optional[str],
        Field(
            description='A string representation of the default value of the parameter',
            examples=['default-tunnel'],
        ),
    ] = None
    description: Annotated[
        str,
        Field(
            description='A description of the parameter suitable for human or LLM use',
            examples=['The name of the Cloudflare tunnel to manage'],
        ),
    ]
    name: Annotated[
        str, Field(description='The name of the parameter', examples=['tunnel_name'])
    ]
    required: Annotated[
        bool, Field(description='Whether the parameter is required', examples=['true'])
    ]
    sensitive: Annotated[
        Optional[bool],
        Field(
            description='Whether the parameter contains sensitive information that should be handled securely',
            examples=['false'],
        ),
    ] = None
    type: Annotated[
        str, Field(description='The type of the parameter', examples=['string'])
    ]


class Agoracapability(BaseModel):
    BaseModel: Dict[str, Any]
    async_: Annotated[
        bool,
        Field(
            alias='async',
            description='Indicates if this is an asynchronous capability',
            examples=['false'],
        ),
    ]
    category: Annotated[
        Optional[List[int]],
        Field(
            description='The categories this capability belongs to. Use Category enum constants like CategoryRecon, CategoryAD, CategoryNetwork, etc. Access string values via CategoryStrings[category]',
            examples=['["recon", "ad"]'],
        ),
    ] = None
    description: Annotated[
        str,
        Field(
            description='A description of the capability suitable for human or LLM use',
            examples=['Identifies open ports on a target host'],
        ),
    ]
    executor: Annotated[
        str,
        Field(
            description='The task executor that can execute this capability',
            examples=['JanusPlugin'],
        ),
    ]
    integration: Annotated[
        bool,
        Field(
            description='Whether or not this capability is an integration with an external service',
            examples=['true'],
        ),
    ]
    largeArtifact: Annotated[
        Optional[bool],
        Field(
            description='If true, this capability generates large artifacts that can be stored and reviewed later',
            examples=['false'],
        ),
    ] = None
    name: Annotated[
        str, Field(description='The name of the capability', examples=['portscan'])
    ]
    parameters: Annotated[
        Optional[List[Dict[str, Any]]],
        Field(
            description='The parameters/options of the capability',
            examples=['{"input": {"ip": "1.2.3.4"}, "tcp": true, "udp": false}'],
        ),
    ] = None
    runs_on: Annotated[
        Optional[int],
        Field(
            description='The platform this capability runs on. Use Platform enum constants like PlatformWindows, PlatformLinux, PlatformAny, etc. Access string values via PlatformStrings[platform]',
            examples=['windows'],
        ),
    ] = None
    surface: Annotated[
        str,
        Field(
            description='The attack surface of the capability', examples=['internal']
        ),
    ]
    target: Annotated[
        str, Field(description='The target of the capability', examples=['asset'])
    ]
    title: Annotated[
        str, Field(description='The pretty name of the capability', examples=['AWS'])
    ]
    version: Annotated[
        str,
        Field(
            description='The version of the capability (major.minor.patch)',
            examples=['1.0.0'],
        ),
    ]


class Agoraparameter(BaseModel):
    BaseModel: Dict[str, Any]
    default: Annotated[
        Optional[str],
        Field(
            description='A string representation of the default value of the parameter',
            examples=['1.2.3.4'],
        ),
    ] = None
    description: Annotated[
        str,
        Field(
            description='A description of the parameter suitable for human or LLM use',
            examples=['The rate limit for the capability'],
        ),
    ]
    name: Annotated[
        str, Field(description='The name of the parameter', examples=['rate_limit'])
    ]
    required: Annotated[
        bool, Field(description='Whether the parameter is required', examples=['true'])
    ]
    type: Annotated[
        str, Field(description='The type of the parameter', examples=['string'])
    ]


class Asset(BaseModel):
    BaseAsset: Dict[str, Any]
    dns: Annotated[
        str,
        Field(
            description='The DNS name, or group identifier associated with this asset.',
            examples=['example.com'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Name of the asset, or the same value as DNS if this asset represents the group.',
            examples=['169.254.169.254'],
        ),
    ]
    private: Annotated[
        bool,
        Field(
            description='Flag indicating if the asset is considered private (e.g., internal IP).',
            examples=['false'],
        ),
    ]


class Attribute(BaseModel):
    BaseModel: Dict[str, Any]
    capability: Annotated[
        Optional[str],
        Field(
            description='Capability that discovered this attribute.',
            examples=['portscan'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the attribute was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the attribute.',
            examples=['#attribute#open_port#80#asset#example.com#example.com'],
        ),
    ]
    metadata: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Additional metadata associated with the attribute.',
            examples=['{"tool": "masscan"}'],
        ),
    ] = None
    name: Annotated[
        str, Field(description='Name of the attribute.', examples=['https'])
    ]
    origin_source: Annotated[
        str,
        Field(
            description='Source that added this to the system (one of self, account, seed)',
            examples=['seed'],
        ),
    ]
    parent: Annotated[Dict[str, Any], Field(description='Attribute parent.')]
    source: Annotated[
        str,
        Field(
            description='Key of the parent model this attribute belongs to.',
            examples=['#asset#example.com#example.com'],
        ),
    ]
    status: Annotated[
        str, Field(description='Status of the attribute.', examples=['A'])
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the attribute record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the attribute.',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        str, Field(description='Value of the attribute.', examples=['443'])
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the attribute was last visited or confirmed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class Awsresource(BaseModel):
    CloudResource: Dict[str, Any]


class Azureresource(BaseModel):
    CloudResource: Dict[str, Any]
    resourceGroup: str


class Baserelationship(BaseModel):
    BaseModel: Dict[str, Any]
    attachment: Dict[str, Any]
    attachmentPath: str
    capability: Annotated[
        str,
        Field(
            description='The capability or tool that discovered/created this relationship.',
            examples=['portscan'],
        ),
    ]
    created: Annotated[
        str,
        Field(
            description='Timestamp when the relationship was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the relationship.',
            examples=['<source_key>#DISCOVERED#<target_key>'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the relationship was last visited or confirmed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class Cache(BaseModel):
    BaseModel: Dict[str, Any]
    cached: List[int]
    key: Annotated[
        str,
        Field(
            description='Unique key for the cache record.',
            examples=['#cache#ipv4scan#127.0.0.1'],
        ),
    ]
    keys: List[str]
    large: bool
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the cache record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the account.',
            examples=['user@example.com'],
        ),
    ]


class Cloudresource(BaseModel):
    BaseModel: Dict[str, Any]
    History: Dict[str, Any]
    OriginationData: Dict[str, Any]
    accountRef: str
    created: str
    displayName: str
    group: str
    identifier: str
    ips: List[str]
    key: str
    labels: List[str]
    name: str
    properties: Dict[str, Any]
    provider: str
    region: str
    resourceType: str
    secret: str
    status: str
    ttl: int
    urls: List[str]
    username: str
    visited: str


class Commandresult(BaseModel):
    BaseModel: Dict[str, Any]
    capability: Annotated[
        str,
        Field(
            description='The Aegis capability that was executed',
            examples=['praetorian.aegis.Windows.ad.pingcastle'],
        ),
    ]
    command: Annotated[
        Optional[str],
        Field(
            description='The actual command that was executed',
            examples=['adduser testuser'],
        ),
    ] = None
    duration: Annotated[
        Optional[int],
        Field(description='Execution duration in milliseconds', examples=['1500']),
    ] = None
    error_message: Annotated[
        Optional[str],
        Field(
            description='Error message if the capability failed',
            examples=['Command failed with exit code 1'],
        ),
    ] = None
    error_output: Annotated[
        Optional[str],
        Field(
            description='Error output from the command',
            examples=["fatal: The user 'newuser123' does not exist."],
        ),
    ] = None
    exit_code: Annotated[
        int,
        Field(description='The exit code returned by the capability', examples=['0']),
    ]
    output: Annotated[
        Optional[str],
        Field(
            description='Standard output from the command',
            examples=['User added successfully'],
        ),
    ] = None
    success: Annotated[
        bool,
        Field(
            description='Whether the capability executed successfully',
            examples=['true'],
        ),
    ]
    target: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='The target this capability was executed against (optional for management capabilities)'
        ),
    ] = None


class Condition(BaseModel):
    BaseModel: Dict[str, Any]
    key: Annotated[
        str,
        Field(
            description='Unique key for the condition.',
            examples=['#condition#exposure-open_port-80'],
        ),
    ]
    name: Annotated[
        str,
        Field(description='Name of the condition or attribute.', examples=['https']),
    ]
    source: Annotated[
        str,
        Field(description='Source of the condition information.', examples=['system']),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the condition was last updated (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the condition.',
            examples=['system'],
        ),
    ]
    value: Annotated[
        str, Field(description='Value associated with the condition.', examples=['443'])
    ]


class Configuration(BaseModel):
    BaseModel: Dict[str, Any]
    key: Annotated[
        str,
        Field(
            description='Unique key for the setting.',
            examples=['#setting#notification_email'],
        ),
    ]
    last_modified: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Timestamp when the setting was last modified.',
            examples=['2023-01-01T00:00:00Z'],
        ),
    ] = None
    name: Annotated[
        str, Field(description='Name of the setting.', examples=['notification_email'])
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the setting (if user-specific).',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        Dict[str, Any],
        Field(description='Value of the setting.', examples=['admin@example.com']),
    ]


class Conversation(BaseModel):
    BaseModel: Dict[str, Any]
    created: Annotated[
        str,
        Field(
            description='Timestamp when the conversation was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key for the conversation.',
            examples=[
                '#conversation#example-conversation#550e8400-e29b-41d4-a716-446655440000'
            ],
        ),
    ]
    topic: Annotated[
        str,
        Field(
            description='Topic extracted from first message (first 256 chars).',
            examples=['Find all active assets in my infrastructure'],
        ),
    ]
    user: Annotated[
        str,
        Field(
            description='Who started the conversation.', examples=['user@example.com']
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Username who owns the conversation.',
            examples=['user@example.com'],
        ),
    ]
    uuid: Annotated[
        str,
        Field(
            description='UUID of the conversation for reference.',
            examples=['550e8400-e29b-41d4-a716-446655440000'],
        ),
    ]


class Cpe(BaseModel):
    BaseModel: Dict[str, Any]
    edition: Annotated[
        str, Field(description='Edition information.', examples=['professional'])
    ]
    language: Annotated[str, Field(description='Language tag.', examples=['en-us'])]
    other: Annotated[
        str, Field(description='Other relevant information.', examples=['oem'])
    ]
    part: Annotated[
        str,
        Field(
            description='CPE part (h=hardware, o=os, a=application).', examples=['a']
        ),
    ]
    product: Annotated[str, Field(description='Product name.', examples=['windows_10'])]
    swEdition: Annotated[str, Field(description='Software edition.', examples=['home'])]
    targetHw: Annotated[
        str, Field(description='Target hardware environment.', examples=['x64'])
    ]
    targetSw: Annotated[
        str, Field(description='Target software environment.', examples=['windows'])
    ]
    update: Annotated[
        str, Field(description='Update or service pack.', examples=['sp1'])
    ]
    vendor: Annotated[str, Field(description='Vendor name.', examples=['microsoft'])]
    version: Annotated[
        str, Field(description='Version identifier.', examples=['10.0.19042'])
    ]


class Credential(BaseModel):
    BaseModel: Dict[str, Any]
    accountKey: Annotated[str, Field(description='Key of the associated account')]
    category: Annotated[str, Field(description='Category of the credential')]
    created: Annotated[
        str, Field(description='Timestamp when the credential was created')
    ]
    credentialId: Annotated[str, Field(description='UUID for the credential')]
    format: Annotated[str, Field(description='Format of the credential')]
    key: Annotated[
        str,
        Field(
            description='Key of the credential (#credential#category#type#credentialId)'
        ),
    ]
    name: Annotated[
        str, Field(description='Pretty name or user label for the credential')
    ]
    type: Annotated[str, Field(description='Type of credential')]
    updated: Annotated[
        str, Field(description='Timestamp when the credential was last updated')
    ]
    username: Annotated[
        str, Field(description='Username associated with the credential')
    ]


class Cvssmetrics(BaseModel):
    BaseModel: Dict[str, Any]
    base_score: Annotated[
        Optional[float], Field(description='CVSS base score.', examples=['9.8'])
    ] = None
    base_severity: Annotated[
        Optional[str],
        Field(description='CVSS base severity rating.', examples=['Critical']),
    ] = None
    base_vector: Annotated[
        Optional[str],
        Field(
            description='CVSS base vector string.',
            examples=['CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'],
        ),
    ] = None
    exploit_maturity: Annotated[
        Optional[str],
        Field(description='Exploit maturity level.', examples=['Proof-of-Concept']),
    ] = None
    exploitability_score: Annotated[
        Optional[float],
        Field(description='CVSS exploitability subscore.', examples=['3.9']),
    ] = None
    impact_score: Annotated[
        Optional[float], Field(description='CVSS impact subscore.', examples=['5.9'])
    ] = None
    metric_group: Annotated[
        str,
        Field(description='Metric group (Base, Temporal, Threat).', examples=['Base']),
    ]
    temporal_score: Annotated[
        Optional[float], Field(description='CVSS temporal score.', examples=['8.1'])
    ] = None
    temporal_vector: Annotated[
        Optional[str],
        Field(description='CVSS temporal vector string.', examples=['E:P/RL:O/RC:C']),
    ] = None
    threat_score: Annotated[
        Optional[float],
        Field(description='CVSS threat score (v4.0+).', examples=['9.1']),
    ] = None
    threat_severity: Annotated[
        Optional[str],
        Field(description='CVSS threat severity (v4.0+).', examples=['High']),
    ] = None
    type: Annotated[
        str,
        Field(
            description='Type of CVSS metric (Primary or Secondary).',
            examples=['Primary'],
        ),
    ]
    version: Annotated[
        str,
        Field(
            description='CVSS version (e.g., v2, v3.0, v3.1, v4.0).', examples=['v3.1']
        ),
    ]


class Data(BaseModel):
    BaseModel: Dict[str, Any]
    count: Annotated[
        Optional[int], Field(description='A singular count value.', examples=['150'])
    ] = None
    counts: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='A map of named counts.',
            examples=['{"active": 100, "pending": 50}'],
        ),
    ] = None
    values: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='A map of named float values.',
            examples=['{"average_score": 8.5}'],
        ),
    ] = None


class Discovered(BaseModel):
    BaseRelationship: Dict[str, Any]


class Enrichment(BaseModel):
    BaseModel: Dict[str, Any]
    cvss: Annotated[
        Optional[List[Dict[str, Any]]],
        Field(description='List of associated CVSS metrics.'),
    ] = None
    description: Annotated[
        str,
        Field(
            description='Detailed description of the vulnerability or enrichment context.',
            examples=['A remote code execution vulnerability exists...'],
        ),
    ]
    epss: Annotated[
        Optional[Dict[str, Any]],
        Field(description='Associated EPSS score and percentile.'),
    ] = None
    exploits: Annotated[
        Optional[Dict[str, Any]],
        Field(description='Exploit counts and timeline information.'),
    ] = None
    id: Annotated[
        str,
        Field(
            description='Unique identifier for the enrichment data (often CVE ID).',
            examples=['CVE-2023-12345'],
        ),
    ]
    is_kev: Annotated[
        bool,
        Field(
            description='Indicates if the vulnerability is listed in the CISA KEV catalog.',
            examples=['true'],
        ),
    ]
    mitre_techniques: Annotated[
        Optional[List[Dict[str, Any]]],
        Field(description='List of associated MITRE ATT&CK techniques.'),
    ] = None
    modified: Annotated[
        str,
        Field(
            description='Date the vulnerability or enrichment data was last modified (RFC3339).',
            examples=['2023-11-10T12:00:00Z'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Common name or title (e.g., from KEV).',
            examples=['Microsoft Exchange Server Remote Code Execution Vulnerability'],
        ),
    ]
    published: Annotated[
        str,
        Field(
            description='Date the vulnerability or enrichment data was published (RFC3339).',
            examples=['2023-11-01T00:00:00Z'],
        ),
    ]
    ssvc: Annotated[
        Optional[List[Dict[str, Any]]],
        Field(description='List of associated SSVC assessments.'),
    ] = None
    threat_actors: Annotated[
        Optional[List[Dict[str, Any]]],
        Field(description='List of associated threat actors.'),
    ] = None
    weaknesses: Annotated[
        Optional[List[Dict[str, Any]]],
        Field(description='List of associated weaknesses (e.g., CWEs).'),
    ] = None


class Epss(BaseModel):
    BaseModel: Dict[str, Any]
    percentile: Annotated[
        Optional[float], Field(description='EPSS percentile rank.', examples=['0.99'])
    ] = None
    score: Annotated[
        Optional[float],
        Field(
            description='EPSS score (probability of exploitation).', examples=['0.95']
        ),
    ] = None


class Exploitcounts(BaseModel):
    BaseModel: Dict[str, Any]
    botnets: Annotated[
        int,
        Field(
            description='Number of botnets associated with exploits.', examples=['1']
        ),
    ]
    exploits: Annotated[
        int, Field(description='Total number of known exploits.', examples=['5'])
    ]
    ransomware_families: Annotated[
        int,
        Field(
            description='Number of ransomware families associated with exploits.',
            examples=['2'],
        ),
    ]
    threat_actors: Annotated[
        int,
        Field(
            description='Number of threat actors associated with exploits.',
            examples=['3'],
        ),
    ]


class Exploits(BaseModel):
    BaseModel: Dict[str, Any]
    counts: Annotated[
        Optional[Dict[str, Any]],
        Field(description='Counts of various exploit-related indicators.'),
    ] = None
    timeline: Annotated[
        Optional[Dict[str, Any]],
        Field(description='Timeline of exploit-related events.'),
    ] = None


class Exploittimeline(BaseModel):
    BaseModel: Dict[str, Any]
    cisa_kev_date_added: Annotated[
        Optional[str],
        Field(
            description='Date added to CISA KEV catalog (RFC3339).',
            examples=['2023-01-10T00:00:00Z'],
        ),
    ] = None
    cisa_kev_date_due: Annotated[
        Optional[str],
        Field(
            description='Due date for patching according to CISA KEV (RFC3339).',
            examples=['2023-01-31T00:00:00Z'],
        ),
    ] = None
    first_exploit_published: Annotated[
        Optional[str],
        Field(
            description='Date the first exploit was published (RFC3339).',
            examples=['2022-12-01T00:00:00Z'],
        ),
    ] = None
    first_exploit_published_weaponized_or_higher: Annotated[
        Optional[str],
        Field(
            description='Date the first weaponized (or higher) exploit was published (RFC3339).',
            examples=['2022-12-15T00:00:00Z'],
        ),
    ] = None
    first_reported_botnet: Annotated[
        Optional[str],
        Field(
            description='Date the first associated botnet was reported (RFC3339).',
            examples=['2023-02-01T00:00:00Z'],
        ),
    ] = None
    first_reported_ransomware: Annotated[
        Optional[str],
        Field(
            description='Date the first associated ransomware was reported (RFC3339).',
            examples=['2023-01-20T00:00:00Z'],
        ),
    ] = None
    first_reported_threat_actor: Annotated[
        Optional[str],
        Field(
            description='Date the first associated threat actor was reported (RFC3339).',
            examples=['2023-01-05T00:00:00Z'],
        ),
    ] = None
    most_recent_exploit_published: Annotated[
        Optional[str],
        Field(
            description='Date the most recent exploit was published (RFC3339).',
            examples=['2023-03-01T00:00:00Z'],
        ),
    ] = None
    most_recent_reported_botnet: Annotated[
        Optional[str],
        Field(
            description='Date the most recent associated botnet was reported (RFC3339).',
            examples=['2023-03-10T00:00:00Z'],
        ),
    ] = None
    most_recent_reported_ransomware: Annotated[
        Optional[str],
        Field(
            description='Date the most recent associated ransomware was reported (RFC3339).',
            examples=['2023-02-20T00:00:00Z'],
        ),
    ] = None
    most_recent_reported_threat_actor: Annotated[
        Optional[str],
        Field(
            description='Date the most recent associated threat actor was reported (RFC3339).',
            examples=['2023-02-15T00:00:00Z'],
        ),
    ] = None
    nvd_last_modified: Annotated[
        Optional[str],
        Field(
            description='NVD last modified date (RFC3339).',
            examples=['2023-04-01T10:00:00Z'],
        ),
    ] = None
    nvd_published: Annotated[
        Optional[str],
        Field(
            description='NVD published date (RFC3339).',
            examples=['2022-11-01T00:00:00Z'],
        ),
    ] = None
    vulncheck_kev_date_added: Annotated[
        Optional[str],
        Field(
            description='Date added to VulnCheck KEV (RFC3339).',
            examples=['2023-01-11T00:00:00Z'],
        ),
    ] = None
    vulncheck_kev_date_due: Annotated[
        Optional[str],
        Field(
            description='Due date for patching according to VulnCheck KEV (RFC3339).',
            examples=['2023-02-01T00:00:00Z'],
        ),
    ] = None


class File(BaseModel):
    BaseModel: Dict[str, Any]
    bytes: Annotated[
        List[int],
        Field(
            description="File content. Must be a JSON-compatible string. Can be encoded with base64 if it begins with the prefix 'base64:'",
            examples=['base64:dGVzdA=='],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key for the file record.',
            examples=['#file#proofs/scan.txt'],
        ),
    ]
    name: Annotated[
        str,
        Field(description='Name or path of the file.', examples=['proofs/scan.txt']),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the file record was last updated (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the file.',
            examples=['user@example.com'],
        ),
    ]


class Flag(BaseModel):
    BaseModel: Dict[str, Any]
    key: Annotated[
        str, Field(description='Unique key for the flag.', examples=['#flag#feature-x'])
    ]
    name: Annotated[
        str, Field(description='Name of the feature flag.', examples=['feature-x'])
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the flag.',
            examples=['user@example.com'],
        ),
    ]


class Gcpresource(BaseModel):
    CloudResource: Dict[str, Any]


class Hasattribute(BaseModel):
    BaseRelationship: Dict[str, Any]


class Hascredential(BaseModel):
    BaseRelationship: Dict[str, Any]


class Hastechnology(BaseModel):
    BaseRelationship: Dict[str, Any]


class Hasvulnerability(BaseModel):
    BaseRelationship: Dict[str, Any]


class Haswebpage(BaseModel):
    BaseRelationship: Dict[str, Any]


class History(BaseModel):
    BaseModel: Dict[str, Any]
    history: Annotated[
        Optional[List[Dict[str, Any]]],
        Field(description='List of history records detailing changes.'),
    ] = None
    remove: Annotated[
        Optional[int],
        Field(
            description='Index of the history record to remove (used for updates, not stored).',
            examples=['0'],
        ),
    ] = None


class Historyrecord(BaseModel):
    BaseModel: Dict[str, Any]
    affiliationVerdict: Annotated[
        Optional[str],
        Field(
            description='Affiliation verdict from an ML model, if applicable.',
            examples=['Affiliated'],
        ),
    ] = None
    base: Annotated[
        Optional[str],
        Field(
            description='Identifier of the ML model used for the prediction, if applicable.',
            examples=['affiliation-model-v1.2'],
        ),
    ] = None
    by: Annotated[
        Optional[str],
        Field(
            description='Identifier of the user or system that made the change.',
            examples=['user@example.com'],
        ),
    ] = None
    comment: Annotated[
        Optional[str],
        Field(
            description='Comment associated with the history event.',
            examples=['Asset confirmed via scan.'],
        ),
    ] = None
    filePath: Annotated[
        Optional[str],
        Field(
            description='Path to a related file, if applicable.',
            examples=['proofs/evidence.png'],
        ),
    ] = None
    from_: Annotated[
        Optional[str],
        Field(
            alias='from', description='The previous state or value.', examples=['TL']
        ),
    ] = None
    logit: Annotated[
        Optional[float],
        Field(
            description='Logit value from an ML model prediction, if applicable.',
            examples=['0.85'],
        ),
    ] = None
    to: Annotated[
        Optional[str], Field(description='The new state or value.', examples=['OL'])
    ] = None
    updated: Annotated[
        Optional[str],
        Field(
            description='Timestamp of the history event (RFC3339).',
            examples=['2023-10-27T11:05:00Z'],
        ),
    ] = None


class Instanceof(BaseModel):
    BaseRelationship: Dict[str, Any]


class Integration(BaseModel):
    BaseAsset: Dict[str, Any]
    name: Annotated[
        str, Field(description='Name of the integration.', examples=['github'])
    ]
    value: Annotated[
        str, Field(description='Value of the integration.', examples=['1234567890'])
    ]


class Job(BaseModel):
    BaseModel: Dict[str, Any]
    Queue: Annotated[
        str, Field(description='Target queue for the job.', examples=['standard'])
    ]
    allowRepeat: Annotated[
        bool,
        Field(
            description='Indicates if repeating this job should be allowed. Used for manual jobs, or rescan jobs, that should not block other job executions.',
            examples=['false'],
        ),
    ]
    capabilities: Annotated[
        Optional[List[str]],
        Field(
            description='List of specific capabilities to run for this job.',
            examples=['["portscan", "nuclei"]'],
        ),
    ] = None
    comment: Annotated[
        Optional[str],
        Field(
            description='Optional comment about the job.',
            examples=['Scanning standard web ports'],
        ),
    ] = None
    config: Annotated[
        Dict[str, Any],
        Field(
            description='Configuration parameters for the job capability.',
            examples=['{"test": "cve-1111-2222"}'],
        ),
    ]
    conversation: Annotated[
        Optional[str],
        Field(
            description='UUID of the conversation that initiated this job.',
            examples=['550e8400-e29b-41d4-a716-446655440000'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the job was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    delayed: Annotated[
        Optional[str],
        Field(
            description='Timestamp that this job should be delayed until',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ] = None
    dns: Annotated[
        str,
        Field(
            description="Primary DNS associated with the job's target.",
            examples=['example.com'],
        ),
    ]
    full: Annotated[
        Optional[bool],
        Field(description='Indicates if this is a full scan job.', examples=['false']),
    ] = None
    key: Annotated[
        str,
        Field(
            description='Unique key for the job.',
            examples=['#job#example.com#asset#portscan'],
        ),
    ]
    largeArtifactFileName: Annotated[
        Optional[str],
        Field(
            description='The name of the file that contains the large artifacts.',
            examples=['large_artifact.zip'],
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description='The IP address this job was executed from',
            examples=['1.2.3.4'],
        ),
    ] = None
    origin: Annotated[
        Dict[str, Any],
        Field(description='The job that originally started this chain of jobs.'),
    ]
    parent: Annotated[
        Optional[Dict[str, Any]],
        Field(description='Optional parent target from which this job was spawned.'),
    ] = None
    s3DownloadURL: Annotated[
        Optional[str],
        Field(
            description='The URL of the file that contains the large output.',
            examples=['https://s3.amazonaws.com/big_output.zip'],
        ),
    ] = None
    secret: Annotated[
        Dict[str, Any],
        Field(
            description='Sensitive configuration parameters (credentials, tokens, keys).'
        ),
    ]
    source: Annotated[
        str,
        Field(
            description='The source or capability that generated this job.',
            examples=['portscan'],
        ),
    ]
    status: Annotated[
        str,
        Field(
            description='Current status of the job (e.g., JQ#portscan).',
            examples=['JQ#portscan'],
        ),
    ]
    target: Annotated[
        Dict[str, Any], Field(description='The primary target of the job.')
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the job record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the job was last updated (RFC3339).',
            examples=['2023-10-27T10:05:00Z'],
        ),
    ]
    user: Annotated[
        Optional[str],
        Field(
            description='User who initiated this job.', examples=['user@example.com']
        ),
    ] = None
    username: Annotated[
        str,
        Field(
            description='Username who initiated or owns the job.',
            examples=['user@example.com'],
        ),
    ]


class Key(BaseModel):
    BaseModel: Dict[str, Any]
    created: str
    creator: str
    deleted: str
    deleter: str
    expires: Annotated[
        str,
        Field(
            description='Optional expiration timestamp in RFC3339 format',
            examples=['2024-12-31T23:59:59Z'],
        ),
    ]
    id: Annotated[
        str,
        Field(
            description='ID of this key',
            examples=['550e8400-e29b-41d4-a716-446655440000'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key for the key record.',
            examples=['#key#550e8400-e29b-41d4-a716-446655440000'],
        ),
    ]
    name: Annotated[str, Field(description='Name of this key', examples=['user'])]
    secret: str
    status: str
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the account.',
            examples=['user@example.com'],
        ),
    ]
    visited: str


class Message(BaseModel):
    BaseModel: Dict[str, Any]
    content: Annotated[
        str,
        Field(
            description='Content of the message.',
            examples=['Hello, how can I help you today?'],
        ),
    ]
    conversationId: Annotated[
        str,
        Field(
            description='ID of the conversation this message belongs to.',
            examples=['550e8400-e29b-41d4-a716-446655440000'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key for the message.',
            examples=[
                '#message#550e8400-e29b-41d4-a716-446655440000#1sB5tZfLipTVWQWHVKnDFS6kFRK'
            ],
        ),
    ]
    messageId: Annotated[
        str,
        Field(
            description='UUIDv7 for message ordering.',
            examples=['01234567-89ab-7def-0123-456789abcdef'],
        ),
    ]
    role: Annotated[
        str,
        Field(
            description='Role of the message sender (user, chariot, system, tool).',
            examples=['user'],
        ),
    ]
    timestamp: Annotated[
        str,
        Field(
            description='Timestamp when the message was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    toolUseContent: Annotated[
        Optional[str],
        Field(
            description='JSON serialized tool use content for assistant tool use messages.',
            examples=['{"name":"query","input":{"node":{"labels":["Asset"]}}}'],
        ),
    ] = None
    toolUseId: Annotated[
        Optional[str],
        Field(
            description='Tool use ID for tool result messages.',
            examples=['tooluse_kZJMlvQmRJ6eAyJE5GIl7Q'],
        ),
    ] = None
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the message record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Username who sent the message.', examples=['user@example.com']
        ),
    ]


class Metadata(BaseModel):
    BaseModel: Dict[str, Any]
    OriginationData: Dict[str, Any]
    asname: Annotated[
        Optional[str], Field(description='Autonomous System name.', examples=['GOOGLE'])
    ] = None
    asnumber: Annotated[
        Optional[str],
        Field(description='Autonomous System number.', examples=['AS15169']),
    ] = None
    asrange: Annotated[
        Optional[str],
        Field(description='Autonomous System IP range.', examples=['172.217.0.0/16']),
    ] = None
    city: Annotated[
        Optional[str],
        Field(
            description='City associated with the asset.', examples=['Mountain View']
        ),
    ] = None
    cloudAccount: Annotated[
        Optional[str],
        Field(
            description='Specific account identifier within the cloud provider.',
            examples=['billing-account-id'],
        ),
    ] = None
    cloudId: Annotated[
        Optional[str],
        Field(
            description='Unique identifier within the cloud provider.',
            examples=['project-id-12345'],
        ),
    ] = None
    cloudRoot: Annotated[
        Optional[str],
        Field(
            description='Root identifier for the cloud environment (e.g., organization ID).',
            examples=['organizations/1234567890'],
        ),
    ] = None
    cloudService: Annotated[
        Optional[str],
        Field(
            description='Name of the cloud service provider (e.g., AWS, GCP, Azure).',
            examples=['GCP'],
        ),
    ] = None
    country: Annotated[
        Optional[str],
        Field(description='Country associated with the asset.', examples=['US']),
    ] = None
    email: Annotated[
        Optional[str],
        Field(
            description='Optional contact email associated with the seed.',
            examples=['contact@example.com'],
        ),
    ] = None
    expiration: Annotated[
        Optional[str],
        Field(
            description='Date the asset registration expires (RFC3339).',
            examples=['2024-09-15T00:00:00Z'],
        ),
    ] = None
    province: Annotated[
        Optional[str],
        Field(
            description='Province or state associated with the asset.',
            examples=['California'],
        ),
    ] = None
    purchased: Annotated[
        Optional[str],
        Field(
            description='Date the asset (e.g., domain) was purchased (RFC3339).',
            examples=['2002-09-15T00:00:00Z'],
        ),
    ] = None
    registrant: Annotated[
        Optional[str],
        Field(
            description='Registered owner of the asset (e.g., domain).',
            examples=['Google LLC'],
        ),
    ] = None
    registrar: Annotated[
        Optional[str],
        Field(
            description='Registrar managing the asset (e.g., domain).',
            examples=['MarkMonitor Inc.'],
        ),
    ] = None
    updated: Annotated[
        Optional[str],
        Field(
            description='Date the asset registration was last updated (RFC3339).',
            examples=['2023-09-15T10:00:00Z'],
        ),
    ] = None


class Mitretechnique(BaseModel):
    BaseModel: Dict[str, Any]
    domain: Annotated[
        Optional[str],
        Field(description='MITRE ATT&CK domain.', examples=['enterprise-attack']),
    ] = None
    id: Annotated[
        Optional[str],
        Field(description='MITRE ATT&CK technique ID.', examples=['T1566']),
    ] = None
    name: Annotated[
        Optional[str],
        Field(description='MITRE ATT&CK technique name.', examples=['Phishing']),
    ] = None
    subtechnique: Annotated[
        Optional[bool],
        Field(description='Indicates if this is a sub-technique.', examples=['false']),
    ] = None
    tactics: Annotated[
        Optional[List],
        Field(
            description='List of MITRE ATT&CK tactics associated with the technique.',
            examples=['["initial-access"]'],
        ),
    ] = None
    url: Annotated[
        Optional[str],
        Field(
            description='URL for more information about the technique.',
            examples=['https://attack.mitre.org/techniques/T1566/'],
        ),
    ] = None


class Mlproperties(BaseModel):
    BaseModel: Dict[str, Any]
    agent: Annotated[
        Optional[str],
        Field(
            description='Name of the agent that provided the ML properties.',
            examples=['autotriage'],
        ),
    ] = None
    logit: Annotated[
        Optional[float],
        Field(
            description='Logit value from an ML model prediction.', examples=['0.75']
        ),
    ] = None
    proofSufficient: Annotated[
        Optional[bool],
        Field(
            description='Indicates if ML model considers proof sufficient for auto-triage.',
            examples=['true'],
        ),
    ] = None


class Noinput(BaseModel):
    BaseModel: Dict[str, Any]
    identifier: str
    key: str
    status: str


class Organization(BaseModel):
    BaseModel: Dict[str, Any]
    History: Dict[str, Any]
    additional_addresses: Annotated[
        Optional[List],
        Field(
            description='List of additional office addresses.',
            examples=['["456 Oak St, New York, NY", "789 Pine Ave, Austin, TX"]'],
        ),
    ] = None
    address_types: Annotated[
        Optional[List],
        Field(
            description='List of address types.',
            examples=['["headquarters", "office", "branch"]'],
        ),
    ] = None
    alternate_phones: Annotated[
        Optional[List],
        Field(
            description='List of additional phone numbers.',
            examples=['["+1-555-123-4567", "+1-555-987-6543"]'],
        ),
    ] = None
    annual_revenue: Annotated[
        Optional[float],
        Field(description='Annual revenue in USD.', examples=['50000000']),
    ] = None
    apollio_id: Annotated[
        Optional[str],
        Field(
            description='Apollo.io organization identifier.', examples=['apollo123456']
        ),
    ] = None
    blog_url: Annotated[
        Optional[str],
        Field(description='Company blog URL.', examples=['https://blog.example.com']),
    ] = None
    business_model: Annotated[
        Optional[str],
        Field(description='Business model description.', examples=['B2B SaaS']),
    ] = None
    city: Annotated[
        Optional[str],
        Field(
            description='City where the organization is headquartered.',
            examples=['San Francisco'],
        ),
    ] = None
    country: Annotated[
        Optional[str],
        Field(
            description='Country where the organization is based.',
            examples=['United States'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the organization record was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    data_quality_score: Annotated[
        Optional[float],
        Field(description='Data quality score from Apollo.io.', examples=['0.95']),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description='Organization description.',
            examples=['Leading technology company providing innovative solutions.'],
        ),
    ] = None
    domain: Annotated[
        Optional[str],
        Field(
            description='Primary domain associated with the organization.',
            examples=['example.com'],
        ),
    ] = None
    email: Annotated[
        Optional[str],
        Field(description='Primary contact email.', examples=['contact@example.com']),
    ] = None
    employee_range: Annotated[
        Optional[str],
        Field(description='Employee count range.', examples=['1000-5000']),
    ] = None
    enrichment_source: Annotated[
        Optional[str],
        Field(description='Source of enrichment data.', examples=['apollo.io']),
    ] = None
    estimated_num_employees: Annotated[
        Optional[int],
        Field(description='Estimated number of employees.', examples=['5000']),
    ] = None
    exchange: Annotated[
        Optional[str],
        Field(
            description='Stock exchange where shares are traded.', examples=['NASDAQ']
        ),
    ] = None
    facebook_url: Annotated[
        Optional[str],
        Field(
            description='Facebook page URL.',
            examples=['https://www.facebook.com/examplecorp'],
        ),
    ] = None
    fax: Annotated[
        Optional[str], Field(description='Fax number.', examples=['+1-555-123-4568'])
    ] = None
    founded_year: Annotated[
        Optional[int],
        Field(description='Year the organization was founded.', examples=['2010']),
    ] = None
    funding_amounts: Annotated[
        Optional[List],
        Field(
            description='List of funding amounts in USD.',
            examples=['[1000000, 5000000, 15000000]'],
        ),
    ] = None
    funding_rounds: Annotated[
        Optional[List],
        Field(
            description='List of funding round types.',
            examples=['["Seed", "Series A", "Series B"]'],
        ),
    ] = None
    industry: Annotated[
        Optional[str],
        Field(
            description='Primary industry classification.',
            examples=['Software & Technology'],
        ),
    ] = None
    investors: Annotated[
        Optional[List],
        Field(
            description='List of investors.',
            examples=['["Accel Partners", "Sequoia Capital", "Greylock Partners"]'],
        ),
    ] = None
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the organization.',
            examples=['#organization#example.com#Example Corp'],
        ),
    ]
    keywords: Annotated[
        Optional[List],
        Field(
            description='Keywords associated with the organization.',
            examples=['["SaaS", "cloud", "enterprise"]'],
        ),
    ] = None
    last_enriched_at: Annotated[
        Optional[str],
        Field(
            description='Timestamp when data was last enriched from Apollo.io (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ] = None
    linkedin_url: Annotated[
        Optional[str],
        Field(
            description='LinkedIn company page URL.',
            examples=['https://www.linkedin.com/company/example-corp'],
        ),
    ] = None
    market_capitalization: Annotated[
        Optional[float],
        Field(description='Market capitalization in USD.', examples=['1000000000']),
    ] = None
    name: Annotated[
        Optional[str],
        Field(description='Organization name.', examples=['Example Corporation']),
    ] = None
    organization_type: Annotated[
        Optional[str],
        Field(description='Type of organization.', examples=['Public Company']),
    ] = None
    phone: Annotated[
        Optional[str],
        Field(description='Primary phone number.', examples=['+1-555-123-4567']),
    ] = None
    phone_types: Annotated[
        Optional[List],
        Field(
            description='List of phone types corresponding to alternate phones.',
            examples=['["main", "fax"]'],
        ),
    ] = None
    postal_code: Annotated[
        Optional[str], Field(description='Postal or ZIP code.', examples=['94105'])
    ] = None
    publicly_traded: Annotated[
        Optional[bool],
        Field(
            description='Whether the organization is publicly traded.',
            examples=['true'],
        ),
    ] = None
    revenue_range: Annotated[
        Optional[str],
        Field(description='Revenue range description.', examples=['$10M-$50M']),
    ] = None
    state: Annotated[
        Optional[str], Field(description='State or region.', examples=['California'])
    ] = None
    status: Annotated[
        str,
        Field(
            description='Operational status of the organization record.', examples=['A']
        ),
    ]
    street_address: Annotated[
        Optional[str],
        Field(
            description='Street address of headquarters.',
            examples=['123 Market Street'],
        ),
    ] = None
    sub_industries: Annotated[
        Optional[List],
        Field(
            description='List of sub-industry classifications.',
            examples=['["Enterprise Software", "Cloud Computing"]'],
        ),
    ] = None
    tech_categories: Annotated[
        Optional[List],
        Field(
            description='List of technology categories.',
            examples=['["CRM", "Cloud", "DevOps"]'],
        ),
    ] = None
    tech_vendors: Annotated[
        Optional[List],
        Field(
            description='List of technology vendors.',
            examples=['["Salesforce.com", "Amazon", "Docker Inc"]'],
        ),
    ] = None
    technologies: Annotated[
        Optional[List],
        Field(
            description='List of technologies used by the organization.',
            examples=['["Salesforce", "AWS", "Docker"]'],
        ),
    ] = None
    ticker_symbol: Annotated[
        Optional[str],
        Field(description='Stock ticker symbol if publicly traded.', examples=['EXMP']),
    ] = None
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the organization record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    twitter_url: Annotated[
        Optional[str],
        Field(
            description='Twitter profile URL.',
            examples=['https://twitter.com/examplecorp'],
        ),
    ] = None
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the organization record.',
            examples=['user@example.com'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the organization was last visited or updated (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]
    website: Annotated[
        Optional[str],
        Field(
            description='Organization website URL.',
            examples=['https://www.example.com'],
        ),
    ] = None


class Person(BaseModel):
    BaseModel: Dict[str, Any]
    History: Dict[str, Any]
    apollo_id: Annotated[
        Optional[str],
        Field(
            description='Apollo.io person identifier.',
            examples=['671bd2e8c2c9b5000169ba39'],
        ),
    ] = None
    city: Annotated[
        Optional[str],
        Field(
            description='City where the person is located.', examples=['San Francisco']
        ),
    ] = None
    country: Annotated[
        Optional[str],
        Field(
            description='Country where the person is located.',
            examples=['United States'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the person record was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    data_quality_score: Annotated[
        Optional[float],
        Field(description='Data quality score from Apollo.io.', examples=['0.92']),
    ] = None
    departments: Annotated[
        Optional[List],
        Field(
            description='List of departments person works in.',
            examples=['["Engineering", "Product"]'],
        ),
    ] = None
    email: Annotated[
        Optional[str],
        Field(
            description="Person's primary email address.",
            examples=['john.doe@example.com'],
        ),
    ] = None
    email_status: Annotated[
        Optional[str],
        Field(description='Email verification status.', examples=['verified']),
    ] = None
    employment_history: Annotated[
        Optional[List],
        Field(description="List of person's employment history records."),
    ] = None
    enrichment_source: Annotated[
        Optional[str],
        Field(description='Source of enrichment data.', examples=['apollo.io']),
    ] = None
    extrapolated_email_confidence: Annotated[
        Optional[float],
        Field(
            description='Confidence score for extrapolated email.', examples=['0.95']
        ),
    ] = None
    facebook_url: Annotated[
        Optional[str],
        Field(
            description='Facebook profile URL.',
            examples=['https://www.facebook.com/johndoe'],
        ),
    ] = None
    first_name: Annotated[
        Optional[str], Field(description="Person's first name.", examples=['John'])
    ] = None
    functions: Annotated[
        Optional[List],
        Field(
            description='List of job functions.',
            examples=['["Software Development", "Technical Leadership"]'],
        ),
    ] = None
    github_url: Annotated[
        Optional[str],
        Field(
            description='GitHub profile URL.', examples=['https://github.com/johndoe']
        ),
    ] = None
    headline: Annotated[
        Optional[str],
        Field(
            description="Person's professional headline.",
            examples=['Senior Software Engineer at Example Corp'],
        ),
    ] = None
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the person.',
            examples=['#person#john.doe@example.com#John Doe'],
        ),
    ]
    last_enriched_at: Annotated[
        Optional[str],
        Field(
            description='Timestamp when data was last enriched from Apollo.io (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ] = None
    last_name: Annotated[
        Optional[str], Field(description="Person's last name.", examples=['Doe'])
    ] = None
    linkedin_url: Annotated[
        Optional[str],
        Field(
            description='LinkedIn profile URL.',
            examples=['https://www.linkedin.com/in/johndoe'],
        ),
    ] = None
    name: Annotated[
        Optional[str], Field(description="Person's full name.", examples=['John Doe'])
    ] = None
    organization_id: Annotated[
        Optional[str],
        Field(
            description='Apollo.io organization ID where person currently works.',
            examples=['5e66b6381e05b4008c8331b8'],
        ),
    ] = None
    organization_name: Annotated[
        Optional[str],
        Field(
            description='Name of organization where person currently works.',
            examples=['Example Corp'],
        ),
    ] = None
    personal_emails: Annotated[
        Optional[List],
        Field(
            description='List of personal email addresses.',
            examples=['["john.doe@gmail.com", "johndoe@yahoo.com"]'],
        ),
    ] = None
    phone: Annotated[
        Optional[str],
        Field(description="Person's phone number.", examples=['+1-555-123-4567']),
    ] = None
    photo_url: Annotated[
        Optional[str],
        Field(
            description="Person's profile photo URL.",
            examples=['https://media.licdn.com/dms/image/123/profile-pic.jpg'],
        ),
    ] = None
    seniority: Annotated[
        Optional[str], Field(description='Seniority level.', examples=['Senior'])
    ] = None
    state: Annotated[
        Optional[str],
        Field(
            description='State or region where the person is located.',
            examples=['California'],
        ),
    ] = None
    status: Annotated[
        str,
        Field(description='Operational status of the person record.', examples=['A']),
    ]
    title: Annotated[
        Optional[str],
        Field(
            description="Person's current job title.",
            examples=['Senior Software Engineer'],
        ),
    ] = None
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the person record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    twitter_url: Annotated[
        Optional[str],
        Field(
            description='Twitter profile URL.', examples=['https://twitter.com/johndoe']
        ),
    ] = None
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the person record.',
            examples=['user@example.com'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the person was last visited or updated (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]
    work_email: Annotated[
        Optional[str],
        Field(
            description="Person's work email address.",
            examples=['john.doe@company.com'],
        ),
    ] = None


class Preseed(BaseModel):
    BaseModel: Dict[str, Any]
    capability: Annotated[
        Optional[str],
        Field(
            description='Capability associated with processing this preseed record.',
            examples=['whois-lookup'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the preseed record was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    display: Annotated[
        str,
        Field(
            description='Hint for UI display type (e.g., text, image, base64).',
            examples=['text'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the preseed record.',
            examples=['#preseed#whois#registrant_email#test@example.com'],
        ),
    ]
    status: Annotated[
        str, Field(description='Status of the preseed record.', examples=['A'])
    ]
    title: Annotated[
        str,
        Field(
            description='Title or category within the preseed type.',
            examples=['registrant_email'],
        ),
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the preseed record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    type: Annotated[
        str, Field(description='Type of the preseed data.', examples=['whois'])
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the preseed record.',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        str,
        Field(description='The actual preseed value.', examples=['test@example.com']),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the preseed record was last visited or processed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class Repository(BaseModel):
    BaseAsset: Dict[str, Any]
    name: Annotated[
        Optional[str],
        Field(description='Repository name.', examples=['praetorian-inc/tabularium']),
    ] = None
    org: Annotated[
        Optional[str],
        Field(description='Organization name.', examples=['praetorian-inc']),
    ] = None
    url: Annotated[
        Optional[str],
        Field(
            description='Repository URL.',
            examples=['https://github.com/praetorian-inc/tabularium'],
        ),
    ] = None


class Result(BaseModel):
    BaseModel: Dict[str, Any]
    context: Annotated[
        Dict[str, Any], Field(description='The context associated with this result.')
    ]
    items: Annotated[
        List[Dict[str, Any]], Field(description='The actual result items.')
    ]


class Risk(BaseModel):
    BaseModel: Dict[str, Any]
    History: Dict[str, Any]
    MLProperties: Dict[str, Any]
    Tags: Dict[str, Any]
    beta: Annotated[
        bool, Field(description='Whether the risk is in beta.', examples=['true'])
    ]
    comment: Annotated[
        Optional[str],
        Field(
            description='User-provided comment about the risk.',
            examples=['Confirmed by manual check'],
        ),
    ] = None
    created: Annotated[
        str,
        Field(
            description='Timestamp when the risk was first created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    dns: Annotated[
        str,
        Field(
            description='Primary DNS or group associated with the risk.',
            examples=['example.com'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the risk.',
            examples=['#risk#example.com#CVE-2023-12345'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Name of the risk or vulnerability.',
            examples=['CVE-2023-12345'],
        ),
    ]
    plextracid: Annotated[
        str,
        Field(
            description='ID of the risk in PlexTrac.',
            examples=['#clientID#reportId#findingId'],
        ),
    ]
    priority: Annotated[
        int,
        Field(
            description='Calculated priority score based on severity.', examples=['10']
        ),
    ]
    source: Annotated[
        str, Field(description='Source that identified the risk.', examples=['nessus'])
    ]
    status: Annotated[
        str,
        Field(
            description='Current status of the risk (e.g., TH, OC, RM).',
            examples=['TH'],
        ),
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the risk record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the risk was last updated (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the risk.',
            examples=['user@example.com'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the risk was last visited or confirmed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class Riskdefinition(BaseModel):
    BaseModel: Dict[str, Any]
    Description: Annotated[
        str,
        Field(
            description='Description of the risk or vulnerability.',
            examples=['This vulnerability allows...'],
        ),
    ]
    Impact: Annotated[
        str,
        Field(
            description='Potential impact if the risk is exploited.',
            examples=['Remote code execution.'],
        ),
    ]
    Recommendation: Annotated[
        str,
        Field(
            description='Recommended actions to mitigate the risk.',
            examples=['Apply vendor patch XYZ.'],
        ),
    ]
    References: Annotated[
        str,
        Field(
            description='Supporting references or links.',
            examples=[
                'https://nvd.nist.gov/vuln/detail/CVE-2023-12345\nhttps://vendor.com/security/advisory'
            ],
        ),
    ]


class Scanner(BaseModel):
    BaseModel: Dict[str, Any]
    created: str
    ip: Annotated[
        str,
        Field(description='IP address of the scanner record.', examples=['127.0.0.1']),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key for the scanner record.', examples=['#scanner#ip']
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the account.',
            examples=['user@example.com'],
        ),
    ]
    visited: str


class Setting(BaseModel):
    BaseModel: Dict[str, Any]
    key: Annotated[
        str,
        Field(
            description='Unique key for the setting.',
            examples=['#setting#notification_email'],
        ),
    ]
    last_modified: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Timestamp when the setting was last modified.',
            examples=['2023-01-01T00:00:00Z'],
        ),
    ] = None
    name: Annotated[
        str, Field(description='Name of the setting.', examples=['notification_email'])
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the setting (if user-specific).',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        Dict[str, Any],
        Field(description='Value of the setting.', examples=['admin@example.com']),
    ]


class Ssvc(BaseModel):
    BaseModel: Dict[str, Any]
    automatable: Annotated[
        Optional[str], Field(description='SSVC automatable status.', examples=['yes'])
    ] = None
    exploitation: Annotated[
        Optional[str],
        Field(description='SSVC exploitation status.', examples=['active']),
    ] = None
    source: Annotated[
        Optional[str],
        Field(description='Source of the SSVC assessment.', examples=['CISA']),
    ] = None
    technical_impact: Annotated[
        Optional[str],
        Field(description='SSVC technical impact level.', examples=['total']),
    ] = None


class Statistic(BaseModel):
    BaseModel: Dict[str, Any]
    created: Annotated[
        str,
        Field(
            description="Timestamp when the statistic was generated (RFC3339 or 'now').",
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    data: Annotated[
        Dict[str, Any],
        Field(description='The actual statistical data.', examples=['{"count": 150}']),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key for the statistic record.',
            examples=['#statistic#asset_count#global#2023-10-27T00:00:00Z#all'],
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='The specific name or scope of the statistic.',
            examples=['global'],
        ),
    ]
    store: Annotated[
        bool,
        Field(
            description='Flag indicating if this statistic should be stored long-term.',
            examples=['true'],
        ),
    ]
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the statistic record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    type: Annotated[
        str,
        Field(
            description='The type or category of the statistic.',
            examples=['asset_count'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the statistic.',
            examples=['user@example.com'],
        ),
    ]
    value: Annotated[
        str,
        Field(
            description='A specific value or sub-category for the statistic.',
            examples=['all'],
        ),
    ]


class Technology(BaseModel):
    AliasCPE: Dict[str, Any]
    BaseModel: Dict[str, Any]
    History: Dict[str, Any]
    Tags: Dict[str, Any]
    comment: Annotated[
        Optional[str],
        Field(
            description='User-provided comment about the technology record.',
            examples=['Found on main web server'],
        ),
    ] = None
    cpe: Annotated[
        str,
        Field(
            description='The full CPE string representation.',
            examples=['cpe:2.3:a:apache:http_server:2.4.50:*:*:*:*:*:*:*'],
        ),
    ]
    created: Annotated[
        str,
        Field(
            description='Timestamp when the technology record was created (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the technology (based on CPE string).',
            examples=['#technology#cpe:2.3:a:apache:http_server:2.4.50:*:*:*:*:*:*:*'],
        ),
    ]
    name: Annotated[
        Optional[str],
        Field(
            description='Optional common name for the technology.',
            examples=['Apache httpd'],
        ),
    ] = None
    source: Annotated[
        Optional[str],
        Field(
            description='Source that identified this technology.',
            examples=['wappalyzer'],
        ),
    ] = None
    ttl: Annotated[
        int,
        Field(
            description='Time-to-live for the technology record (Unix timestamp).',
            examples=['1706353200'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the technology record.',
            examples=['user@example.com'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the technology was last visited or confirmed (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]


class Threat(BaseModel):
    BaseModel: Dict[str, Any]
    created: Annotated[
        str,
        Field(
            description='Timestamp associated with the threat data creation (often includes feed name).',
            examples=['#threat#vulncheck#2023-11-01T00:00:00Z'],
        ),
    ]
    data: Annotated[
        Dict[str, Any],
        Field(
            description='The actual threat intelligence data.',
            examples=['{"cvss": 9.8, "exploits": ["metasploit"]}'],
        ),
    ]
    feed: Annotated[str, Field(description='The feed this threat was found in')]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the threat record.',
            examples=['#threat#vulncheck#CVE-2023-12345'],
        ),
    ]
    source: Annotated[
        str,
        Field(
            description='Identifier for the source of the threat data (e.g., CVE ID).',
            examples=['CVE-2023-12345'],
        ),
    ]
    updated: Annotated[
        str,
        Field(
            description='Timestamp when the threat record was last updated (RFC3339).',
            examples=['2023-11-10T12:00:00Z'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the threat data.',
            examples=['system'],
        ),
    ]


class Threatactor(BaseModel):
    BaseModel: Dict[str, Any]
    aliases: Annotated[
        List[str],
        Field(
            description='Known aliases for the threat actor.',
            examples=['["Fancy Bear", "Sofacy Group"]'],
        ),
    ]
    categories: Annotated[
        List[str],
        Field(
            description='Categories the threat actor falls into.',
            examples=['["State-Sponsored", "Espionage"]'],
        ),
    ]
    country: Annotated[
        Optional[str],
        Field(description='Country associated with the threat actor.', examples=['RU']),
    ] = None
    name: Annotated[
        str, Field(description='Name of the threat actor group.', examples=['APT28'])
    ]


class Vulnerability(BaseModel):
    BaseModel: Dict[str, Any]
    cvss: Annotated[
        Optional[float],
        Field(
            description='Highest CVSS base score associated with the vulnerability.',
            examples=['9.8'],
        ),
    ] = None
    epss: Annotated[
        Optional[float],
        Field(
            description='EPSS score (probability of exploitation).', examples=['0.95']
        ),
    ] = None
    exploit: Annotated[
        bool,
        Field(
            description='Indicates if there is known public exploit code available.',
            examples=['true'],
        ),
    ]
    id: Annotated[
        str,
        Field(
            description='Identifier for the vulnerability (e.g., CVE ID).',
            examples=['CVE-2023-12345'],
        ),
    ]
    kev: Annotated[
        bool,
        Field(
            description='Indicates if the vulnerability is listed in the CISA KEV catalog.',
            examples=['true'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the vulnerability.',
            examples=['#vulnerability#CVE-2023-12345'],
        ),
    ]
    title: Annotated[
        Optional[str],
        Field(
            description='Title associated with the vulnerability.', examples=['Title']
        ),
    ] = None
    username: Annotated[
        str,
        Field(
            description='Chariot username associated with the vulnerability record (usually global).',
            examples=['global'],
        ),
    ]
    writeupId: Annotated[
        Optional[int],
        Field(
            description='PlexTrac writeup ID associated with the vulnerability.',
            examples=['12345'],
        ),
    ] = None


class Vulnerabilitydefinition(BaseModel):
    BaseModel: Dict[str, Any]
    description: Annotated[
        str,
        Field(
            description='Description of the vulnerability.',
            examples=['A buffer overflow vulnerability in XYZ software.'],
        ),
    ]
    impact: Annotated[
        str,
        Field(
            description='Impact of the vulnerability.',
            examples=['Remote code execution leading to system compromise.'],
        ),
    ]
    recommendation: Annotated[
        str,
        Field(
            description='Recommended actions to mitigate the vulnerability.',
            examples=['Apply the latest security patch.'],
        ),
    ]
    references: Annotated[
        str,
        Field(
            description='References of the vulnerability.',
            examples=['https://nvd.nist.gov/vuln/detail/CVE-2023-12345'],
        ),
    ]


class Weakness(BaseModel):
    BaseModel: Dict[str, Any]
    name: Annotated[
        Optional[str],
        Field(
            description='Name of the weakness.',
            examples=[
                "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
        ),
    ] = None
    source: Annotated[
        Optional[str],
        Field(
            description='Source of the weakness information (e.g., NVD).',
            examples=['NVD'],
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description='Type of weakness classification (Primary or Secondary).',
            examples=['Primary'],
        ),
    ] = None
    url: Annotated[
        Optional[str],
        Field(
            description='URL for more information about the weakness.',
            examples=['https://cwe.mitre.org/data/definitions/79.html'],
        ),
    ] = None
    value: Annotated[
        Optional[str],
        Field(description='Weakness identifier (e.g., CWE ID).', examples=['CWE-79']),
    ] = None


class Webapplication(BaseModel):
    BaseAsset: Dict[str, Any]
    BurpMetadata: Dict[str, Any]
    name: Annotated[
        str, Field(description='Name of the web application', examples=['Example App'])
    ]
    primary_url: Annotated[
        str,
        Field(
            description='The primary/canonical URL of the web application',
            examples=['https://app.example.com'],
        ),
    ]
    urls: Annotated[
        List[str],
        Field(
            description='Additional URLs associated with this web application',
            examples=['["https://api.example.com", "https://admin.example.com"]'],
        ),
    ]


class Webpage(BaseModel):
    BaseModel: Dict[str, Any]
    History: Dict[str, Any]
    WebpageDetails: Dict[str, Any]
    artifacts: Annotated[
        List[Dict[str, Any]],
        Field(
            description='Source code repositories or files for analysis (e.g., repositories, file keys)'
        ),
    ]
    created: Annotated[
        str,
        Field(
            description='Timestamp when the webpage was first discovered (RFC3339).',
            examples=['2023-10-27T10:00:00Z'],
        ),
    ]
    details_filepath: Annotated[
        str,
        Field(
            description='The path to the details file for the webpage.',
            examples=['webpage/1234567890/details-1234567890.json'],
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='Unique key identifying the webpage.',
            examples=['#webpage#https://example.com#parentKey'],
        ),
    ]
    metadata: Annotated[
        Dict[str, Any],
        Field(
            description='Additional metadata associated with the webpage.',
            examples=['{"title": "Example Domain"}'],
        ),
    ]
    parent: Annotated[
        Dict[str, Any],
        Field(
            description='The parent entity from which this webpage was discovered. Only used for creating a relationship'
        ),
    ]
    private: Annotated[
        bool,
        Field(
            description='Whether the webpage is on a public web server.',
            examples=['false'],
        ),
    ]
    source: Annotated[
        List[str],
        Field(
            description='Sources that identified this webpage (e.g., seed, crawl)',
            examples=['["crawl", "login"]'],
        ),
    ]
    sso_identified: Annotated[
        Dict[str, Any],
        Field(
            description='SSO providers that have identified this webpage with their last seen timestamps.',
            examples=[
                '{"okta": {"last_seen": "2023-10-27T11:00:00Z", "id": "1234567890", "name": "Chariot"}}'
            ],
        ),
    ]
    status: Annotated[
        str,
        Field(
            description='Current status of the webpage (e.g., Active, Inactive).',
            examples=['Active'],
        ),
    ]
    ttl: Annotated[
        int,
        Field(
            description='Timestamp when the webpage will be deleted from the database in Unix seconds.',
            examples=['1747636791'],
        ),
    ]
    url: Annotated[
        str,
        Field(
            description='The basic URL of the webpage.',
            examples=['https://example.com/path'],
        ),
    ]
    username: Annotated[
        str,
        Field(
            description='The username associated with this webpage, if authenticated.',
            examples=['user@example.com'],
        ),
    ]
    visited: Annotated[
        str,
        Field(
            description='Timestamp when the webpage was last visited (RFC3339).',
            examples=['2023-10-27T11:00:00Z'],
        ),
    ]
